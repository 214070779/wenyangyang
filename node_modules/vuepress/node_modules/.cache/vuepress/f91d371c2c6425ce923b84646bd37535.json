{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Project-organization.md?vue&type=template&id=ccf9b37e&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Project-organization.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"项目架构\"><a class=\"header-anchor\" href=\"#项目架构\">#</a> 项目架构</h1>\n<h2 id=\"_1-mvc、mvp、mvvm模式\"><a class=\"header-anchor\" href=\"#_1-mvc、mvp、mvvm模式\">#</a> 1.MVC、MVP、MVVM模式</h2>\n<h3 id=\"mvc（model、view、controller）\"><a class=\"header-anchor\" href=\"#mvc（model、view、controller）\">#</a> MVC（Model、View、Controller）</h3>\n<p>MVC是比较直观的架构模式，最核心的就是通过Controller层来进行调控，首先看一下官方提供的MVC示意图：</p>\n<p><img src=\"https://qn.nobady.cn/iOS/mvc.png\" alt=\"mvc\"></p>\n<ul>\n<li>\n<p>Model和View永远不能相互通信，只能通过Controller传递</p>\n</li>\n<li>\n<p>Controller可以直接与Model对话（读写调用Model），Model通过NOtification和KVO机制与Controller间接通信</p>\n</li>\n</ul>\n<p>Controller可以直接与View对话，通过IBoutlet直接操作View，IBoutlet直接对应View的控件（例如创建一个Button：需声明一个  IBOutlet UIButton * btn），View通过action向Controller报告时间的发生(用户点击了按钮)。Controller是View的直接数据源</p>\n<ul>\n<li>\n<p>优点：对于混乱的项目组织方式，有了一个明确的组织方式。通过Controller来掌控全局，同时将View展示和Model的变化分开</p>\n</li>\n<li>\n<p>缺点：愈发笨重的Controller，随着业务逻辑的增加，大量的代码放进Controller，导致Controller越来越臃肿，堆积成千上万行代码，后期维护起来费时费力</p>\n</li>\n</ul>\n<h3 id=\"mvp（model、view、presenter）\"><a class=\"header-anchor\" href=\"#mvp（model、view、presenter）\">#</a> MVP（Model、View、Presenter）</h3>\n<p>MVP模式是MVC模式的一个演化版本，其中Model与MVC模式中Model层没有太大区别，主要提供数据存储功能，一般都是用来封装网络获取的json数据；View与MVC中的View层有一些差别，MVP中的View层可以是viewController、view等控件；Presenter层则是作为Model和View的中介，从Model层获取数据之后传给View。</p>\n<p><img src=\"https://qn.nobady.cn/iOS/mvp.png\" alt=\"mvp\"></p>\n<p>从上图可以看出，从MVC模式中增加了Presenter层，将UIViewController中复杂的业务逻辑、网络请求等剥离出来。</p>\n<ul>\n<li>\n<p>优点 模型和视图完全分离，可以做到修改视图而不影响模型；更高效的使用模型，View不依赖Model，可以说VIew能做到对业务逻辑完全分离</p>\n</li>\n<li>\n<p>缺点 Presenter中除了处理业务逻辑以外，还要处理View-Model两层的协调，也会导致Presenter层的臃肿</p>\n</li>\n</ul>\n<h3 id=\"mvvm（model、controller-view、viewmodel）\"><a class=\"header-anchor\" href=\"#mvvm（model、controller-view、viewmodel）\">#</a> MVVM（Model、Controller/View、ViewModel）</h3>\n<p>在MVVM中，view和ViewCOntroller联系在一起，我们把它们视为一个组件，view和ViewController都不能直接引用model，而是引用是视图模型即ViewModel。\nviewModel是一个用来放置用户输入验证逻辑、视图显示逻辑、网络请求等业务逻辑的地方，这样的设计模式，会轻微增加代码量，但是会减少代码的复杂性</p>\n<ul>\n<li>\n<p>优点 VIew可以独立于Model的变化和修改，一个ViewModel可以绑定到不同的View上，降低耦合，增加重用</p>\n</li>\n<li>\n<p>缺点 过于简单的项目不适用、大型的项目视图状态较多时构建和维护成本太大</p>\n</li>\n</ul>\n<p>合理的运用架构模式有利于项目、团队开发工作，但是到底选择哪个设计模式，哪种设计模式更好，就像本文开头所说，不同的设计模式，只是让不同的场景有了更多的选择方案。根据项目场景和开发需求，选择最合适的解决方案。</p>\n<h2 id=\"_2-关于rac你有怎样运用到解决不同api依赖关系\"><a class=\"header-anchor\" href=\"#_2-关于rac你有怎样运用到解决不同api依赖关系\">#</a> 2.关于RAC你有怎样运用到解决不同API依赖关系</h2>\n<ul>\n<li>\n<p>信号的依赖：使用场景是当信号A执行完才会执行信号B,和请求的依赖很类似,例如请求A请求完毕才执行请求B,我们需要注意信号A必须要执行发送完成信号,否则信号B无法执行</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token comment\">//这相当于网络请求中的依赖,必须先执行完信号A才会执行信号B</span>\n<span class=\"token comment\">//经常用作一个请求执行完毕后,才会执行另一个请求</span>\n<span class=\"token comment\">//注意信号A必须要执行发送完成信号,否则信号B无法执行</span>\nRACSignal <span class=\"token operator\">*</span> concatSignal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>signalA concat<span class=\"token operator\">:</span>self<span class=\"token punctuation\">.</span>signalB<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//这里我们是对这个拼接信号进行订阅</span>\n<span class=\"token punctuation\">[</span>concatSignal subscribeNext<span class=\"token operator\">:</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>id x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"%@\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--></li>\n</ul>\n<h2 id=\"_3-weakify和我们宏定义的weakself有什么区别？\"><a class=\"header-anchor\" href=\"#_3-weakify和我们宏定义的weakself有什么区别？\">#</a> 3.@weakify和我们宏定义的WeakSelf有什么区别？</h2>\n<p>@weakify 可以多参数使用</p>\n<h2 id=\"_4-微服务架构设想。\"><a class=\"header-anchor\" href=\"#_4-微服务架构设想。\">#</a> 4.微服务架构设想。</h2>\n<p>微服务架构具有以下优势：</p>\n<ul>\n<li>\n<p>1.灵活和独立的可扩展性</p>\n<p>灵活扩展是微服务架构的主要优势之一。与单片架构不同，每个模块都可以水平扩展并独立于其他模块。因此，微服务架构非常适合大型项目。</p>\n</li>\n<li>\n<p>2.独立技术堆栈</p>\n<p>在微服务架构中，软件工程师有机会使用各种工具和技术构建APP。代码可以用不同的编程语言编写，这为APP开发过程增加了更多的灵活性。</p>\n</li>\n<li>\n<p>3.更好的故障隔离</p>\n<p>如果一个服务失败，它不会影响其他服务的功能。与其他体系结构样式相比，在微服务中，系统继续工作，单片模式下的问题会影响整个APP。</p>\n</li>\n<li>\n<p>4.易于部署和集成</p>\n<p>虽然即使是小代码更改的情况下，开发人员也必须再次部署APP，但在微服务架构中，部署变得更快更轻松。</p>\n<p>由于所有服务都是围绕单一业务流程构建的，因此程序员不必修改和重新部署整个APP，只需要您需要的区域。因此，改进产品也比较简单。</p>\n<p>微服务可以通过全自动部署机制独立部署。此外，通过使用开源持续集成工具，开发人员大大简化了与第三方服务的集成。</p>\n</li>\n<li>\n<p>5.容易理解</p>\n<p>微服务体系结构的另一个优点是很容易理解系统是如何工作的以及它是如何开发的。当一个新的团队成员来到这个项目并且必须快速钻研它时，这特别有用。</p>\n</li>\n</ul>\n<p>那么在iOS中如何借鉴这种思想去构建我们的App呢？是需要我们开发者自己去不断探索的</p>\n</div>\n",null]}