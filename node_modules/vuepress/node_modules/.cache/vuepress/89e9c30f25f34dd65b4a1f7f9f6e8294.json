{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Design-patterns.md?vue&type=template&id=415c8c67&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Design-patterns.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"设计模式\"><a class=\"header-anchor\" href=\"#设计模式\">#</a> 设计模式</h1>\n<h2 id=\"_1-ios有哪些常见的设计模式\"><a class=\"header-anchor\" href=\"#_1-ios有哪些常见的设计模式\">#</a> 1.iOS有哪些常见的设计模式?</h2>\n<ul>\n<li>\n<p>单例模式：单例保证了应用程序的生命周期内仅有一个该类的实例对象,而且易于外界访问.在ios sdk中,UIApplication, NSBundle, NSNotificationCenter, NSFileManager, NSUserDefault, NSURLCache等都是单例.</p>\n</li>\n<li>\n<p>委托模式：委托Delegate是协议的一种,通过@protocol方式实现，常见的有tableView，textField等。</p>\n</li>\n<li>\n<p>观察者模式：观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。在iOS中,观察者模式的具体实现有两种: 通知机制(notification)和KVO机制(Key-value Observing)</p>\n</li>\n</ul>\n<h2 id=\"_2-单例会有什么弊端？\"><a class=\"header-anchor\" href=\"#_2-单例会有什么弊端？\">#</a> 2.单例会有什么弊端？</h2>\n<ul>\n<li>\n<p>主要优点：</p>\n<p>1、提供了对唯一实例的受控访问。</p>\n<p>2、由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。</p>\n<p>3、允许可变数目的实例。</p>\n</li>\n<li>\n<p>主要缺点：</p>\n<p>1、由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。</p>\n<p>2、单例类的职责过重，在一定程度上违背了“单一职责原则”。</p>\n<p>3、滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</p>\n</li>\n</ul>\n<h2 id=\"_3-编程中的六大设计原则？\"><a class=\"header-anchor\" href=\"#_3-编程中的六大设计原则？\">#</a> 3.编程中的六大设计原则？</h2>\n<ul>\n<li>\n<p>1.单一职责原则</p>\n<p>通俗地讲就是一个类只做一件事</p>\n<p>CALayer：动画和视图的显示。</p>\n<p>UIView：只负责事件传递、事件响应。</p>\n</li>\n<li>\n<p>2.开闭原则</p>\n<p>对修改关闭，对扩展开放。 要考虑到后续的扩展性，而不是在原有的基础上来回修改</p>\n</li>\n<li>\n<p>3.接口隔离原则</p>\n<p>使用多个专门的协议、而不是一个庞大臃肿的协议，如 UITableviewDelegate + UITableViewDataSource</p>\n</li>\n<li>\n<p>4.依赖倒置原则</p>\n<p>抽象不应该依赖于具体实现、具体实现可以依赖于抽象。 调用接口感觉不到内部是如何操作的</p>\n</li>\n<li>\n<p>5.里氏替换原则</p>\n<p>父类可以被子类无缝替换，且原有的功能不受任何影响 如：KVO</p>\n</li>\n<li>\n<p>6.迪米特法则</p>\n<p>一个对象应当对其他对象尽可能少的了解，实现高聚合、低耦合</p>\n</li>\n</ul>\n</div>\n",null]}