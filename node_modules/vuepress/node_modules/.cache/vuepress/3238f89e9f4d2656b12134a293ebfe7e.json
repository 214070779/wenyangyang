{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Project-organization.md?vue&type=template&id=ccf9b37e&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Project-organization.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h1',{attrs:{\"id\":\"项目架构\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#项目架构\"}},[_vm._v(\"#\")]),_vm._v(\" 项目架构\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_1-mvc、mvp、mvvm模式\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_1-mvc、mvp、mvvm模式\"}},[_vm._v(\"#\")]),_vm._v(\" 1.MVC、MVP、MVVM模式\")]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"mvc（model、view、controller）\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#mvc（model、view、controller）\"}},[_vm._v(\"#\")]),_vm._v(\" MVC（Model、View、Controller）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"MVC是比较直观的架构模式，最核心的就是通过Controller层来进行调控，首先看一下官方提供的MVC示意图：\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":\"https://qn.nobady.cn/iOS/mvc.png\",\"alt\":\"mvc\"}})]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"Model和View永远不能相互通信，只能通过Controller传递\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"Controller可以直接与Model对话（读写调用Model），Model通过NOtification和KVO机制与Controller间接通信\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"Controller可以直接与View对话，通过IBoutlet直接操作View，IBoutlet直接对应View的控件（例如创建一个Button：需声明一个  IBOutlet UIButton * btn），View通过action向Controller报告时间的发生(用户点击了按钮)。Controller是View的直接数据源\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"优点：对于混乱的项目组织方式，有了一个明确的组织方式。通过Controller来掌控全局，同时将View展示和Model的变化分开\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"缺点：愈发笨重的Controller，随着业务逻辑的增加，大量的代码放进Controller，导致Controller越来越臃肿，堆积成千上万行代码，后期维护起来费时费力\")])])]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"mvp（model、view、presenter）\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#mvp（model、view、presenter）\"}},[_vm._v(\"#\")]),_vm._v(\" MVP（Model、View、Presenter）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"MVP模式是MVC模式的一个演化版本，其中Model与MVC模式中Model层没有太大区别，主要提供数据存储功能，一般都是用来封装网络获取的json数据；View与MVC中的View层有一些差别，MVP中的View层可以是viewController、view等控件；Presenter层则是作为Model和View的中介，从Model层获取数据之后传给View。\")]),_vm._v(\" \"),_c('p',[_c('img',{attrs:{\"src\":\"https://qn.nobady.cn/iOS/mvp.png\",\"alt\":\"mvp\"}})]),_vm._v(\" \"),_c('p',[_vm._v(\"从上图可以看出，从MVC模式中增加了Presenter层，将UIViewController中复杂的业务逻辑、网络请求等剥离出来。\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"优点 模型和视图完全分离，可以做到修改视图而不影响模型；更高效的使用模型，View不依赖Model，可以说VIew能做到对业务逻辑完全分离\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"缺点 Presenter中除了处理业务逻辑以外，还要处理View-Model两层的协调，也会导致Presenter层的臃肿\")])])]),_vm._v(\" \"),_c('h3',{attrs:{\"id\":\"mvvm（model、controller-view、viewmodel）\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#mvvm（model、controller-view、viewmodel）\"}},[_vm._v(\"#\")]),_vm._v(\" MVVM（Model、Controller/View、ViewModel）\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在MVVM中，view和ViewCOntroller联系在一起，我们把它们视为一个组件，view和ViewController都不能直接引用model，而是引用是视图模型即ViewModel。\\nviewModel是一个用来放置用户输入验证逻辑、视图显示逻辑、网络请求等业务逻辑的地方，这样的设计模式，会轻微增加代码量，但是会减少代码的复杂性\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"优点 VIew可以独立于Model的变化和修改，一个ViewModel可以绑定到不同的View上，降低耦合，增加重用\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"缺点 过于简单的项目不适用、大型的项目视图状态较多时构建和维护成本太大\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"合理的运用架构模式有利于项目、团队开发工作，但是到底选择哪个设计模式，哪种设计模式更好，就像本文开头所说，不同的设计模式，只是让不同的场景有了更多的选择方案。根据项目场景和开发需求，选择最合适的解决方案。\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_2-关于rac你有怎样运用到解决不同api依赖关系\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_2-关于rac你有怎样运用到解决不同api依赖关系\"}},[_vm._v(\"#\")]),_vm._v(\" 2.关于RAC你有怎样运用到解决不同API依赖关系\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"信号的依赖：使用场景是当信号A执行完才会执行信号B,和请求的依赖很类似,例如请求A请求完毕才执行请求B,我们需要注意信号A必须要执行发送完成信号,否则信号B无法执行\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-c line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-c\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"//这相当于网络请求中的依赖,必须先执行完信号A才会执行信号B\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"//经常用作一个请求执行完毕后,才会执行另一个请求\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"//注意信号A必须要执行发送完成信号,否则信号B无法执行\")]),_vm._v(\"\\nRACSignal \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" concatSignal \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"self\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"signalA concat\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\"self\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\".\")]),_vm._v(\"signalB\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token comment\"}},[_vm._v(\"//这里我们是对这个拼接信号进行订阅\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"[\")]),_vm._v(\"concatSignal subscribeNext\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"^\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"id x\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n\\t\"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"NSLog\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"@\"),_c('span',{pre:true,attrs:{\"class\":\"token string\"}},[_vm._v(\"\\\"%@\\\"\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"x\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"]\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br')])])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_3-weakify和我们宏定义的weakself有什么区别？\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_3-weakify和我们宏定义的weakself有什么区别？\"}},[_vm._v(\"#\")]),_vm._v(\" 3.@weakify和我们宏定义的WeakSelf有什么区别？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"@weakify 可以多参数使用\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_4-微服务架构设想。\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_4-微服务架构设想。\"}},[_vm._v(\"#\")]),_vm._v(\" 4.微服务架构设想。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"微服务架构具有以下优势：\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"1.灵活和独立的可扩展性\")]),_vm._v(\" \"),_c('p',[_vm._v(\"灵活扩展是微服务架构的主要优势之一。与单片架构不同，每个模块都可以水平扩展并独立于其他模块。因此，微服务架构非常适合大型项目。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"2.独立技术堆栈\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在微服务架构中，软件工程师有机会使用各种工具和技术构建APP。代码可以用不同的编程语言编写，这为APP开发过程增加了更多的灵活性。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"3.更好的故障隔离\")]),_vm._v(\" \"),_c('p',[_vm._v(\"如果一个服务失败，它不会影响其他服务的功能。与其他体系结构样式相比，在微服务中，系统继续工作，单片模式下的问题会影响整个APP。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"4.易于部署和集成\")]),_vm._v(\" \"),_c('p',[_vm._v(\"虽然即使是小代码更改的情况下，开发人员也必须再次部署APP，但在微服务架构中，部署变得更快更轻松。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"由于所有服务都是围绕单一业务流程构建的，因此程序员不必修改和重新部署整个APP，只需要您需要的区域。因此，改进产品也比较简单。\")]),_vm._v(\" \"),_c('p',[_vm._v(\"微服务可以通过全自动部署机制独立部署。此外，通过使用开源持续集成工具，开发人员大大简化了与第三方服务的集成。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"5.容易理解\")]),_vm._v(\" \"),_c('p',[_vm._v(\"微服务体系结构的另一个优点是很容易理解系统是如何工作的以及它是如何开发的。当一个新的团队成员来到这个项目并且必须快速钻研它时，这特别有用。\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"那么在iOS中如何借鉴这种思想去构建我们的App呢？是需要我们开发者自己去不断探索的\")])])}]\n\nexport { render, staticRenderFns }"]}