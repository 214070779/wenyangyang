{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{214:function(a,e,s){\"use strict\";s.r(e);var t=s(28),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"vue\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue\"}},[a._v(\"#\")]),a._v(\" Vue\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%BB%80%E4%B9%88%E6%98%AFmvvm\"}},[a._v(\"什么是mvvm\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#Vue%E7%9A%84%E4%BC%98%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88\"}},[a._v(\"Vue的优点是什么\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E5%AF%B9%E4%BA%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3\"}},[a._v(\"对于生命周期的理解\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC\"}},[a._v(\"组件传值\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#vue%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86\"}},[a._v(\"vue数据绑定原理\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#vue-router%E5%8E%9F%E7%90%86\"}},[a._v(\"vue-router原理\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#vuex%E5%8E%9F%E7%90%86\"}},[a._v(\"vuex原理\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#v-if%E5%92%8Cv-show%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[a._v(\"v-if和v-show的区别\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#vue%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6\"}},[a._v(\"vue怎么实现页面的权限控制\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#keep-alive%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8\"}},[a._v(\"keep-alive有什么作用\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8\"}},[a._v(\"计算属性有什么作用\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#route%E5%92%8Crouter%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[a._v(\"$route和$router的区别\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#watch%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88\"}},[a._v(\"watch的作用是什么\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#vue-loader%E6%98%AF%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%AE%83%E7%9A%84%E7%94%A8%E9%80%94%E6%9C%89%E5%93%AA%E4%BA%9B\"}},[a._v(\"vue-loader是什么？使用它的用途有哪些？\")])]),a._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E5%81%87%E8%AE%BE%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84a123%E7%9B%B8%E5%BA%94%E7%9A%84%E9%A1%B5%E9%9D%A2%E4%B8%8A%E6%98%BE%E7%A4%BA%E7%9A%84%E5%80%BC%E4%B8%BA123%E7%8E%B0%E8%AE%BEa05%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%9A%84%E5%80%BC%E4%BC%9A%E5%8F%98%E6%88%90523%E5%90%97%E4%B8%BA%E4%BB%80%E4%B9%88\"}},[a._v(\"假设定义了一个数组a=[1,2,3]，相应的，页面上显示的值为1,2,3，现设a[0]=5，页面上的值会变成5,2,3吗？为什么？\")])])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"什么是mvvm\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是mvvm\"}},[a._v(\"#\")]),a._v(\" 什么是mvvm\")]),a._v(\" \"),s(\"p\",[a._v(\"MVVM最早由微软提出来，它借鉴了桌面应用程序的MVC思想，在前端页面中，把Model用纯JavaScript对象表示，View负责显示，两者做到了最大限度的分离\\n把Model和View关联起来的就是ViewModel。\"),s(\"br\"),a._v(\"\\nViewModel负责把Model的数据同步到View显示出来，还负责把View的修改同步回Model\"),s(\"br\"),a._v(\"\\nView 和 Model 之间的同步工作完全是自动的，无需人为干涉（由viewModel完成，在这里指VUE）\"),s(\"br\"),a._v(\"\\n因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理\"),s(\"br\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"viewmodel如何编写？\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#viewmodel如何编写？\"}},[a._v(\"#\")]),a._v(\" ViewModel如何编写？\")]),a._v(\" \"),s(\"p\",[a._v(\"需要用JavaScript编写一个通用的ViewModel，这样，就可以复用整个MVVM模型了\")]),a._v(\" \"),s(\"p\",[a._v(\"一个MVVM框架和jQuery操作DOM相比有什么区别？\\n我们先看用jQuery实现的修改两个DOM节点的例子：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v('\\x3c!-- HTML --\\x3e\\n<p>Hello, <span id=\"name\">Bart</span>!</p>\\n<p>You are <span id=\"age\">12</span>.</p>\\n\\nHello, Bart!\\n\\nYou are 12.\\n')])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\")])]),s(\"p\",[a._v(\"用jQuery修改name和age节点的内容：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"var name = 'Homer';\\nvar age = 51;\\n\\n$('#name').text(name);\\n$('#age').text(age);\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\")])]),s(\"p\",[a._v(\"如果我们使用MVVM框架来实现同样的功能，我们首先并不关心DOM的结构，而是关心数据如何存储。最简单的数据存储方式是使用JavaScript对象：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"var person = {\\n    name: 'Bart',\\n    age: 12\\n}\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\")])]),s(\"p\",[a._v(\"我们把变量person看作Model，把HTML某些DOM节点看作View，并假定它们之间被关联起来了。\")]),a._v(\" \"),s(\"p\",[a._v(\"要把显示的name从Bart改为Homer，把显示的age从12改为51，我们并不操作DOM，而是直接修改JavaScript对象：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"person.name = 'Homer';\\nperson.age = 51;\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\")])]),s(\"p\",[a._v(\"执行上面的代码，我们惊讶地发现，改变JavaScript对象的状态，会导致DOM结构作出对应的变化！这让我们的关注点从如何操作DOM变成了如何更新JavaScript对象的状态，而操作JavaScript对象比DOM简单多了！\")]),a._v(\" \"),s(\"p\",[a._v(\"这就是MVVM的设计思想：关注Model的变化，让MVVM框架去自动更新DOM的状态，从而把开发者从操作DOM的繁琐步骤中解脱出来！\\n下图可以很好的解释view viewModel model之间的关系\\n\"),s(\"img\",{attrs:{src:\"https://github.com/woai3c/mini-vue/blob/master/imgs/mvvm.jpg\",alt:\"mvvm\"}})]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"vue的优点是什么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue的优点是什么\"}},[a._v(\"#\")]),a._v(\" Vue的优点是什么\")]),a._v(\" \"),s(\"p\",[a._v(\"mvvm的优点即是vue的优点，在这里再总结一下：\"),s(\"br\"),a._v(\"\\n数据和视频之间的同步工作完全是自动的，无需人为干涉，所以开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，\\n复杂的数据状态维护完全由 MVVM 来统一管理，节省了很多精力。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-2\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"对于生命周期的理解\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对于生命周期的理解\"}},[a._v(\"#\")]),a._v(\" 对于生命周期的理解\")]),a._v(\" \"),s(\"p\",[a._v(\"创建一个Vue实例，是一个漫长的过程，要经历初始化，数据合并，模板解析，数据渲染等等一系列过程。\\n所以，为了能实现在这个过程里面插入自己想要提前做的事情，就有了生命周期钩子函数。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"举个例子：\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#举个例子：\"}},[a._v(\"#\")]),a._v(\" 举个例子：\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"一辆公交车，从出发点A站到终点站B，中间有很多站点，公交车每到一个站点，就得停下来，\\n等待客人上车，然后再驶往下一个站点，一直到终点站为止。\\nA和B之间的站点，就像是这个路程的生命周期。每一个站点都是一个不同的生命周期（站点名不同），\\n只要到了站点，就得执行该站点对应的生命周期函数，\\n只不过每个站点的生命周期函数都是一样的（等待客人上车）。\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\")])]),s(\"p\",[a._v(\"Vue中的生命周期也是一样，对应了Vue实例从创建到结束之间的每一个过程。\\n例如，Vue的\"),s(\"code\",[a._v(\"beforeCreate\")]),a._v(\"周期，指的就是Vue在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。\")]),a._v(\" \"),s(\"p\",[a._v(\"至于Vue具体的生命周期函数有哪些，请看官网\"),s(\"a\",{attrs:{href:\"https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"API文档\"),s(\"OutboundLink\")],1)]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-3\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"组件传值\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件传值\"}},[a._v(\"#\")]),a._v(\" 组件传值\")]),a._v(\" \"),s(\"ul\",[s(\"li\",[a._v(\"父组件通过prop向子组件传值\")]),a._v(\" \"),s(\"li\",[a._v(\"子组件通过事件向父组件传值\")]),a._v(\" \"),s(\"li\",[a._v(\"子组件与子组件之间不能直接传值，需要通过父组件来做间接传值，在这种情况下推荐使用vuex\")])]),a._v(\" \"),s(\"p\",[a._v(\"具体例子请看\"),s(\"a\",{attrs:{href:\"https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"官方文档\"),s(\"OutboundLink\")],1)]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-4\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-4\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"vue数据绑定原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue数据绑定原理\"}},[a._v(\"#\")]),a._v(\" vue数据绑定原理\")]),a._v(\" \"),s(\"p\",[a._v(\"Vue的数据双向绑定都是依据Object.defineProperty()这一方法来做的\"),s(\"br\"),a._v(\"\\nObject.defineProperty到底有什么作用呢？\\n\"),s(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"MDN\"),s(\"OutboundLink\")],1)]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"Object.defineProperty(obj, prop, descriptor)\\n\\nobj\\n要在其上定义属性的对象。\\n\\nprop\\n要定义或修改的属性的名称。\\n\\ndescriptor\\n将被定义或修改的属性描述符。\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\")])]),s(\"p\",[a._v(\"简单来说 这个方法可以定义一个对象某个属性的描述符\")]),a._v(\" \"),s(\"p\",[a._v(\"我们需要用到的就是描述符当中的getter和setter\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"const obj = {a:1}\\nobj.a // 1\\n\\nobj.a = 2 \\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\")])]),s(\"p\",[a._v(\"像上面代码中的两个操作 读取和赋值 就是在访问obj.a的getter和setter\"),s(\"br\"),a._v(\"\\n当我们输入obj.a时 就是在访问obj对象a属性的getter 当输入obj.a = 2 时就是在访问obj对象a属性的setter\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"Object.defineProperty(obj, 'a', {\\n  get : function(){\\n    return val\\n  },\\n  set : function(newValue){\\n    val = newValue\\n  },\\n  enumerable : true,\\n  configurable : true\\n})\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\")])]),s(\"p\",[a._v(\"getter和setter都是一个函数 我们还可以这样做 例如\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"get: function() {\\n  // 每次访问obj.a时都会执行这段代码\\n  console.log('hello, 你在读取a的值')\\n  return val\\n}\\nset: function(newValue) {\\n  val = newValue\\n  // 每次给obj.a赋值时都会执行这段代码\\n  console.log('你设置了a的值')\\n}\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\")])]),s(\"p\",[a._v(\"Vue的双向数据绑定就是根据上面的原理来实现的\\n只要在读取值时收集观察者 在赋值时触发观察者更新函数 就可以实现数据变更 从而实现DOM重新渲染\")]),a._v(\" \"),s(\"p\",[a._v(\"说到这可能还不是很明白 不要急 慢慢来 先看一下这段代码 复制放到HTML文件里自己运行一下\\n然后打开网页 在控制台里输入data.user.name看看 会有惊喜\")]),a._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[a._v(\"<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <title>动态数据绑定（一）</title>\\n</head>\\n<body>\\n <script>\\n    var data = {\\n        user: {\\n            name: 'xiaoming',\\n            age: 18,\\n            occupation: 'frontend'\\n        },\\n        address: {\\n            city: 'shaoguan'\\n        }\\n    }; \\n    function Observer(data) {\\n        this.data = data;\\n        this.walk(data);\\n    }\\n    Observer.prototype = {\\n        walk: function(obj) {\\n            var value,\\n                key;\\n            for (key in obj) {\\n                if (obj.hasOwnProperty(key)) {\\n                    value = obj[key];\\n                    if (typeof value === 'object') {\\n                        new Observer(value);\\n                    }\\n                    this.convert(key, value); \\n                }   \\n            }\\n        },\\n        convert: function(key, value) {\\n            Object.defineProperty(this.data, key, {\\n                get : function(){ \\n                    console.log(\\\"你访问了\\\" + key);\\n                    return value; \\n                },\\n                set : function(newValue){ \\n                    value = newValue; \\n                    console.log('你设置了' + key + '=' + value);\\n                }\\n            });\\n        }\\n    }  \\n    var example = new Observer(data);\\n <\\/script>   \\n</body>\\n</html>\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"17\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"18\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"19\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"20\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"21\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"22\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"23\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"24\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"25\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"26\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"27\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"28\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"29\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"30\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"31\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"32\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"33\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"34\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"35\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"36\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"37\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"38\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"39\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"40\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"41\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"42\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"43\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"44\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"45\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"46\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"47\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"48\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"49\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"50\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"51\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"52\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[a._v(\"53\")]),s(\"br\")])]),s(\"h4\",{attrs:{id:\"回到顶部-5\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-5\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"vue-router原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue-router原理\"}},[a._v(\"#\")]),a._v(\" vue-router原理\")]),a._v(\" \"),s(\"p\",[a._v(\"说简单点，vue-router的原理就是通过对URL地址变化的监听，继而对不同的组件进行渲染。\"),s(\"br\"),a._v(\"\\n每当URL地址改变时，就对相应的组件进行渲染。原理是很简单，实现方式可能有点复杂，主要有hash模式和history模式。\"),s(\"br\"),a._v(\"\\n如果想了解得详细点，建议百度或者阅读源码。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-6\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-6\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"vuex原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vuex原理\"}},[a._v(\"#\")]),a._v(\" vuex原理\")]),a._v(\" \"),s(\"p\",[a._v(\"vuex的原理其实非常简单，它为什么能实现所有的组件共享同一份数据？\"),s(\"br\"),a._v(\"\\n因为vuex生成了一个store实例，并且把这个实例挂在了所有的组件上，所有的组件引用的都是同一个store实例。\"),s(\"br\"),a._v(\"\\nstore实例上有数据，有方法，方法改变的都是store实例上的数据。由于其他组件引用的是同样的实例，所以一个组件改变了store上的数据，\\n导致另一个组件上的数据也会改变，就像是一个对象的引用。\"),s(\"br\"),a._v(\"\\n如果对vuex的实现有兴趣，可以看看我自己造的一个vue轮子对应的\"),s(\"a\",{attrs:{href:\"https://github.com/woai3c/mini-vuex/blob/master/mini-vuex.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"vuex插件\"),s(\"OutboundLink\")],1),a._v(\"。它实现了除vuex模块外的所有功能。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-7\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-7\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"v-if和v-show的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#v-if和v-show的区别\"}},[a._v(\"#\")]),a._v(\" v-if和v-show的区别\")]),a._v(\" \"),s(\"p\",[s(\"code\",[a._v(\"v-if\")]),a._v(\" 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\")]),a._v(\" \"),s(\"p\",[s(\"code\",[a._v(\"v-if\")]),a._v(\" 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\")]),a._v(\" \"),s(\"p\",[a._v(\"相比之下，\"),s(\"code\",[a._v(\"v-show\")]),a._v(\" 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。\")]),a._v(\" \"),s(\"p\",[a._v(\"一般来说，\"),s(\"code\",[a._v(\"v-if\")]),a._v(\" 有更高的切换开销，而 \"),s(\"code\",[a._v(\"v-show\")]),a._v(\" 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 \"),s(\"code\",[a._v(\"v-show\")]),a._v(\" 较好；如果在运行时条件很少改变，则使用\"),s(\"code\",[a._v(\"v-if\")]),a._v(\" 较好。\")]),a._v(\" \"),s(\"p\",[a._v(\"https://cn.vuejs.org/v2/guide/conditional.html#v-if-vs-v-show\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-8\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-8\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"vue怎么实现页面的权限控制\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue怎么实现页面的权限控制\"}},[a._v(\"#\")]),a._v(\" vue怎么实现页面的权限控制\")]),a._v(\" \"),s(\"p\",[a._v(\"利用 \"),s(\"code\",[a._v(\"vue-router\")]),a._v(\" 的 \"),s(\"code\",[a._v(\"beforeEach\")]),a._v(\" 事件，可以在跳转页面前判断用户的权限（利用 cookie 或 token），是否能够进入此页面，如果不能则提示错误或重定向到其他页面，在后台管理系统中这种场景经常能遇到。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-9\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-9\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"keep-alive有什么作用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#keep-alive有什么作用\"}},[a._v(\"#\")]),a._v(\" keep-alive有什么作用\")]),a._v(\" \"),s(\"p\",[a._v(\"在 \"),s(\"code\",[a._v(\"Vue\")]),a._v(\" 中，每次切换组件时，都会重新渲染。如果有多个组件切换，又想让它们保持原来的状态，避免重新渲染，这个时候就可以使用 \"),s(\"code\",[a._v(\"keep-alive\")]),a._v(\"。\\n\"),s(\"code\",[a._v(\"keep-alive\")]),a._v(\" 可以使被包含的组件保留状态，或避免重新渲染。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-10\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-10\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"计算属性有什么作用\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#计算属性有什么作用\"}},[a._v(\"#\")]),a._v(\" 计算属性有什么作用\")]),a._v(\" \"),s(\"p\",[a._v(\"先来看一下计算属性的定义：\"),s(\"br\"),a._v(\"\\n当其依赖的属性的值发生变化的时，计算属性会重新计算。反之则使用缓存中的属性值。\"),s(\"br\"),a._v(\"\\n计算属性和vue中的其它数据一样，都是响应式的，只不过它必须依赖某一个数据实现，并且只有它依赖的数据的值改变了，它才会更新。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-11\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-11\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"route和-router的区别\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#route和-router的区别\"}},[a._v(\"#\")]),a._v(\" $route和$router的区别\")]),a._v(\" \"),s(\"p\",[s(\"code\",[a._v(\"$route\")]),a._v(\" 是路由信息对象，包括\"),s(\"code\",[a._v(\"path\")]),a._v(\"，\"),s(\"code\",[a._v(\"params\")]),a._v(\"，\"),s(\"code\",[a._v(\"hash\")]),a._v(\"，\"),s(\"code\",[a._v(\"query\")]),a._v(\"，\"),s(\"code\",[a._v(\"fullPath\")]),a._v(\"，\"),s(\"code\",[a._v(\"matched\")]),a._v(\"，\"),s(\"code\",[a._v(\"name\")]),a._v(\" 等路由信息参数。\")]),a._v(\" \"),s(\"p\",[a._v(\"而 \"),s(\"code\",[a._v(\"$router\")]),a._v(\" 是路由实例对象，包括了路由的跳转方法，钩子函数等\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-12\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-12\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"watch的作用是什么\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#watch的作用是什么\"}},[a._v(\"#\")]),a._v(\" watch的作用是什么\")]),a._v(\" \"),s(\"p\",[s(\"code\",[a._v(\"watch\")]),a._v(\" 主要作用是监听某个数据值的变化。和计算属性相比除了没有缓存，作用是一样的。\")]),a._v(\" \"),s(\"p\",[a._v(\"借助 \"),s(\"code\",[a._v(\"watch\")]),a._v(\" 还可以做一些特别的事情，例如监听页面路由，当页面跳转时，我们可以做相应的权限控制，拒绝没有权限的用户访问页面。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-13\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-13\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"vue-loader是什么？使用它的用途有哪些？\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue-loader是什么？使用它的用途有哪些？\"}},[a._v(\"#\")]),a._v(\" vue-loader是什么？使用它的用途有哪些？\")]),a._v(\" \"),s(\"p\",[a._v(\"vue-loader 是解析 .vue 文件的一个加载器，将 template/js/style 转换成 js 模块。\")]),a._v(\" \"),s(\"p\",[a._v(\"用途：js 可以写 es6、style 样式可以 scss 或 less；template 可以加 jade 等。\")]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-14\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-14\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])]),a._v(\" \"),s(\"h2\",{attrs:{id:\"假设定义了一个数组a-1-2-3-，相应的，页面上显示的值为1-2-3，现设a-0-5，页面上的值会变成5-2-3吗？为什么？\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#假设定义了一个数组a-1-2-3-，相应的，页面上显示的值为1-2-3，现设a-0-5，页面上的值会变成5-2-3吗？为什么？\"}},[a._v(\"#\")]),a._v(\" 假设定义了一个数组a=[1,2,3]，相应的，页面上显示的值为1,2,3，现设a[0]=5，页面上的值会变成5,2,3吗？为什么？\")]),a._v(\" \"),s(\"p\",[a._v(\"不会\")]),a._v(\" \"),s(\"p\",[a._v(\"因为 Vue 是使用 \"),s(\"code\",[a._v(\"Object.defineProperty\")]),a._v(\" 来监听数值变化的，而直接修改数组的值的这种操作无法监听。\")]),a._v(\" \"),s(\"p\",[a._v(\"例如：\"),s(\"code\",[a._v(\"vm.items[indexOfItem] = newValue\")]),a._v(\" 这种操作是无法监听的。\")]),a._v(\" \"),s(\"p\",[a._v(\"如果需要直接修改数组元素的值，可以使用 \"),s(\"code\",[a._v(\"Vue.set\")])]),a._v(\" \"),s(\"div\",{staticClass:\"language-js line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[a._v(\"Vue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[a._v(\"set\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"(\")]),a._v(\"vm\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\".\")]),a._v(\"items\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" indexOfItem\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\" newValue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\")\")]),a._v(\"\\n\")])]),a._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[a._v(\"1\")]),s(\"br\")])]),s(\"p\",[s(\"a\",{attrs:{href:\"https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"数组更新检测\"),s(\"OutboundLink\")],1)]),a._v(\" \"),s(\"h4\",{attrs:{id:\"回到顶部-15\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回到顶部-15\"}},[a._v(\"#\")]),a._v(\" \"),s(\"a\",{attrs:{href:\"#vue\"}},[a._v(\"回到顶部\")])])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}