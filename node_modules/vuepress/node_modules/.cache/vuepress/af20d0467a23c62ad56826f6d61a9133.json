{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Runloop.md?vue&type=template&id=018e9ba3&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Runloop.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"runloop\\\"><a href=\\\"#runloop\\\" class=\\\"header-anchor\\\">#</a> Runloop</h1> <h2 id=\\\"_1-runloop-和线程的关系？\\\"><a href=\\\"#_1-runloop-和线程的关系？\\\" class=\\\"header-anchor\\\">#</a> 1.Runloop 和线程的关系？</h2> <ul><li><p>一个线程对应一个 Runloop。</p></li> <li><p>主线程的默认就有了 Runloop。</p></li> <li><p>子线程的 Runloop 以懒加载的形式创建。</p></li> <li><p>Runloop 存储在一个全局的可变字典里，线程是 key ，Runloop 是 value。</p></li></ul> <h2 id=\\\"_2-runloop的运行模式\\\"><a href=\\\"#_2-runloop的运行模式\\\" class=\\\"header-anchor\\\">#</a> 2.RunLoop的运行模式</h2> <ul><li><p>RunLoop的运行模式共有5种，RunLoop只会运行在一个模式下，要切换模式，就要暂停当前模式，重写启动一个运行模式</p> <div class=\\\"language-c line-numbers-mode\\\"><pre class=\\\"language-c\\\"><code><span class=\\\"token operator\\\">-</span> kCFRunLoopDefaultMode<span class=\\\"token punctuation\\\">,</span> App的默认运行模式，通常主线程是在这个运行模式下运行\\n<span class=\\\"token operator\\\">-</span> UITrackingRunLoopMode<span class=\\\"token punctuation\\\">,</span> 跟踪用户交互事件（用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他Mode影响）\\n<span class=\\\"token operator\\\">-</span> kCFRunLoopCommonModes<span class=\\\"token punctuation\\\">,</span> 伪模式，不是一种真正的运行模式\\n<span class=\\\"token operator\\\">-</span> UIInitializationRunLoopMode：在刚启动App时第进入的第一个Mode，启动完成后就不再使用\\n<span class=\\\"token operator\\\">-</span> GSEventReceiveRunLoopMode：接受系统内部事件，通常用不到\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br></div></div></li></ul> <h2 id=\\\"_3-runloop内部逻辑？\\\"><a href=\\\"#_3-runloop内部逻辑？\\\" class=\\\"header-anchor\\\">#</a> 3.runloop内部逻辑？</h2> <ul><li><p>实际上 RunLoop 就是这样一个函数，其内部是一个 do-while 循环。当你调用 CFRunLoopRun() 时，线程就会一直停留在这个循环里；直到超时或被手动停止，该函数才会返回。</p> <p><img src=\\\"https://qn.nobady.cn/iOS/runloop.png\\\" alt=\\\"RunLoop\\\"></p></li> <li><p>内部逻辑：</p> <ol><li><p>通知 Observer 已经进入了 RunLoop</p></li> <li><p>通知 Observer 即将处理 Timer</p></li> <li><p>通知 Observer 即将处理非基于端口的输入源（即将处理 Source0）</p></li> <li><p>处理那些准备好的非基于端口的输入源（处理 Source0）</p></li> <li><p>如果基于端口的输入源准备就绪并等待处理，请立刻处理该事件。转到第 9 步（处理 Source1）</p></li> <li><p>通知 Observer 线程即将休眠</p></li> <li><p>将线程置于休眠状态，直到发生以下事件之一</p> <ul><li><p>事件到达基于端口的输入源（port-based input sources）(也就是 Source0)</p></li> <li><p>Timer 到时间执行</p></li> <li><p>外部手动唤醒</p></li> <li><p>为 RunLoop 设定的时间超时</p></li></ul></li> <li><p>通知 Observer 线程刚被唤醒（还没处理事件）</p></li> <li><p>处理待处理事件</p> <ul><li><p>如果是 Timer 事件，处理 Timer 并重新启动循环，跳到第 2 步</p></li> <li><p>如果输入源被触发，处理该事件（文档上是 deliver the event）</p></li> <li><p>如果 RunLoop 被手动唤醒但尚未超时，重新启动循环，跳到第 2 步</p></li></ul></li></ol></li></ul> <h2 id=\\\"_4-autoreleasepool-在何时被释放？\\\"><a href=\\\"#_4-autoreleasepool-在何时被释放？\\\" class=\\\"header-anchor\\\">#</a> 4.autoreleasePool 在何时被释放？</h2> <ul><li><p>App启动后，苹果在主线程 RunLoop 里注册了两个 Observer，其回调都是 _wrapRunLoopWithAutoreleasePoolHandler()。</p></li> <li><p>第一个 Observer 监视的事件是 Entry(即将进入Loop)，其回调内会调用 _objc_autoreleasePoolPush() 创建自动释放池。其 order 是 -2147483647，优先级最高，保证创建释放池发生在其他所有回调之前。</p></li> <li><p>第二个 Observer 监视了两个事件： BeforeWaiting(准备进入休眠) 时调用_objc_autoreleasePoolPop() 和 _objc_autoreleasePoolPush() 释放旧的池并创建新池；Exit(即将退出Loop) 时调用 _objc_autoreleasePoolPop() 来释放自动释放池。这个 Observer 的 order 是 2147483647，优先级最低，保证其释放池子发生在其他所有回调之后。</p></li> <li><p>在主线程执行的代码，通常是写在诸如事件回调、Timer回调内的。这些回调会被 RunLoop 创建好的 AutoreleasePool 环绕着，所以不会出现内存泄漏，开发者也不必显示创建 Pool 了。</p></li></ul> <h2 id=\\\"_5-gcd-在runloop中的使用？\\\"><a href=\\\"#_5-gcd-在runloop中的使用？\\\" class=\\\"header-anchor\\\">#</a> 5.GCD 在Runloop中的使用？</h2> <ul><li>GCD由 子线程 返回到 主线程,只有在这种情况下才会触发 RunLoop。会触发 RunLoop 的 Source 1 事件。</li></ul> <h2 id=\\\"_6-afnetworking-中如何运用-runloop\\\"><a href=\\\"#_6-afnetworking-中如何运用-runloop\\\" class=\\\"header-anchor\\\">#</a> 6.AFNetworking 中如何运用 Runloop?</h2> <ul><li><p>AFURLConnectionOperation 这个类是基于 NSURLConnection 构建的，其希望能在后台线程接收 Delegate 回调。为此 AFNetworking 单独创建了一个线程，并在这个线程中启动了一个 RunLoop：</p> <div class=\\\"language-c line-numbers-mode\\\"><pre class=\\\"language-c\\\"><code><span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span>networkRequestThreadEntryPoint<span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">(</span>id<span class=\\\"token punctuation\\\">)</span>__unused object <span class=\\\"token punctuation\\\">{</span>\\n    @autoreleasepool <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>NSThread currentThread<span class=\\\"token punctuation\\\">]</span> setName<span class=\\\"token operator\\\">:</span>@<span class=\\\"token string\\\">&quot;AFNetworking&quot;</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        NSRunLoop <span class=\\\"token operator\\\">*</span>runLoop <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>NSRunLoop currentRunLoop<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">[</span>runLoop addPort<span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">[</span>NSMachPort port<span class=\\\"token punctuation\\\">]</span> forMode<span class=\\\"token operator\\\">:</span>NSDefaultRunLoopMode<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">[</span>runLoop run<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>NSThread <span class=\\\"token operator\\\">*</span><span class=\\\"token punctuation\\\">)</span>networkRequestThread <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> NSThread <span class=\\\"token operator\\\">*</span>_networkRequestThread <span class=\\\"token operator\\\">=</span> nil<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">static</span> dispatch_once_t oncePredicate<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">dispatch_once</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">&amp;</span>oncePredicate<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">^</span><span class=\\\"token punctuation\\\">{</span>\\n        _networkRequestThread <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>NSThread alloc<span class=\\\"token punctuation\\\">]</span> initWithTarget<span class=\\\"token operator\\\">:</span>self selector<span class=\\\"token operator\\\">:</span>@<span class=\\\"token function\\\">selector</span><span class=\\\"token punctuation\\\">(</span>networkRequestThreadEntryPoint<span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">)</span> object<span class=\\\"token operator\\\">:</span>nil<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">[</span>_networkRequestThread start<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> _networkRequestThread<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br><span class=\\\"line-number\\\">11</span><br><span class=\\\"line-number\\\">12</span><br><span class=\\\"line-number\\\">13</span><br><span class=\\\"line-number\\\">14</span><br><span class=\\\"line-number\\\">15</span><br><span class=\\\"line-number\\\">16</span><br><span class=\\\"line-number\\\">17</span><br><span class=\\\"line-number\\\">18</span><br></div></div></li> <li><p>RunLoop 启动前内部必须要有至少一个 Timer/Observer/Source，所以 AFNetworking 在 [runLoop run] 之前先创建了一个新的 NSMachPort 添加进去了。通常情况下，调用者需要持有这个 NSMachPort (mach_port) 并在外部线程通过这个 port 发送消息到 loop 内；但此处添加 port 只是为了让 RunLoop 不至于退出，并没有用于实际的发送消息。</p> <div class=\\\"language-c line-numbers-mode\\\"><pre class=\\\"language-c\\\"><code><span class=\\\"token operator\\\">-</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span>start <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token punctuation\\\">[</span>self<span class=\\\"token punctuation\\\">.</span>lock lock<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>self isCancelled<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token punctuation\\\">[</span>self performSelector<span class=\\\"token operator\\\">:</span>@<span class=\\\"token function\\\">selector</span><span class=\\\"token punctuation\\\">(</span>cancelConnection<span class=\\\"token punctuation\\\">)</span> onThread<span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>self class<span class=\\\"token punctuation\\\">]</span> networkRequestThread<span class=\\\"token punctuation\\\">]</span> withObject<span class=\\\"token operator\\\">:</span>nil waitUntilDone<span class=\\\"token operator\\\">:</span>NO modes<span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">[</span>self<span class=\\\"token punctuation\\\">.</span>runLoopModes allObjects<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>self isReady<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        self<span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> AFOperationExecutingState<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">[</span>self performSelector<span class=\\\"token operator\\\">:</span>@<span class=\\\"token function\\\">selector</span><span class=\\\"token punctuation\\\">(</span>operationDidStart<span class=\\\"token punctuation\\\">)</span> onThread<span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">[</span>self class<span class=\\\"token punctuation\\\">]</span> networkRequestThread<span class=\\\"token punctuation\\\">]</span> withObject<span class=\\\"token operator\\\">:</span>nil waitUntilDone<span class=\\\"token operator\\\">:</span>NO modes<span class=\\\"token operator\\\">:</span><span class=\\\"token punctuation\\\">[</span>self<span class=\\\"token punctuation\\\">.</span>runLoopModes allObjects<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">[</span>self<span class=\\\"token punctuation\\\">.</span>lock unlock<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre> <div class=\\\"line-numbers-wrapper\\\"><span class=\\\"line-number\\\">1</span><br><span class=\\\"line-number\\\">2</span><br><span class=\\\"line-number\\\">3</span><br><span class=\\\"line-number\\\">4</span><br><span class=\\\"line-number\\\">5</span><br><span class=\\\"line-number\\\">6</span><br><span class=\\\"line-number\\\">7</span><br><span class=\\\"line-number\\\">8</span><br><span class=\\\"line-number\\\">9</span><br><span class=\\\"line-number\\\">10</span><br></div></div></li> <li><p>当需要这个后台线程执行任务时，AFNetworking 通过调用 [NSObject performSelector:onThread:..] 将这个任务扔到了后台线程的 RunLoop 中。</p></li></ul> <h2 id=\\\"_7-performselector-的实现原理？\\\"><a href=\\\"#_7-performselector-的实现原理？\\\" class=\\\"header-anchor\\\">#</a> 7.PerformSelector 的实现原理？</h2> <ul><li><p>当调用 NSObject 的 performSelecter:afterDelay: 后，实际上其内部会创建一个 Timer 并添加到当前线程的 RunLoop 中。所以如果当前线程没有 RunLoop，则这个方法会失效。</p></li> <li><p>当调用 performSelector:onThread: 时，实际上其会创建一个 Timer 加到对应的线程去，同样的，如果对应线程没有 RunLoop 该方法也会失效。</p></li></ul> <h2 id=\\\"_8-performselector-afterdelay-这个方法在子线程中是否起作用？\\\"><a href=\\\"#_8-performselector-afterdelay-这个方法在子线程中是否起作用？\\\" class=\\\"header-anchor\\\">#</a> 8.PerformSelector:afterDelay:这个方法在子线程中是否起作用？</h2> <ul><li>不起作用，子线程默认没有 Runloop，也就没有 Timer。可以使用 GCD的dispatch_after来实现</li></ul> <h2 id=\\\"_9-事件响应的过程？\\\"><a href=\\\"#_9-事件响应的过程？\\\" class=\\\"header-anchor\\\">#</a> 9.事件响应的过程？</h2> <ul><li><p>苹果注册了一个 Source1 (基于 mach port 的) 用来接收系统事件，其回调函数为 __IOHIDEventSystemClientQueueCallback()。</p></li> <li><p>当一个硬件事件(触摸/锁屏/摇晃等)发生后，首先由 IOKit.framework 生成一个 IOHIDEvent 事件并由 SpringBoard 接收。这个过程的详细情况可以参考这里。SpringBoard 只接收按键(锁屏/静音等)，触摸，加速，接近传感器等几种 Event，随后用 mach port 转发给需要的 App 进程。随后苹果注册的那个 Source1 就会触发回调，并调用 _UIApplicationHandleEventQueue() 进行应用内部的分发。</p></li> <li><p>_UIApplicationHandleEventQueue() 会把 IOHIDEvent 处理并包装成 UIEvent 进行处理或分发，其中包括识别 UIGesture/处理屏幕旋转/发送给 UIWindow 等。通常事件比如 UIButton 点击、touchesBegin/Move/End/Cancel 事件都是在这个回调中完成的。</p></li></ul> <h2 id=\\\"_10-手势识别的过程？\\\"><a href=\\\"#_10-手势识别的过程？\\\" class=\\\"header-anchor\\\">#</a> 10.手势识别的过程？</h2> <ul><li><p>当 _UIApplicationHandleEventQueue() 识别了一个手势时，其首先会调用 Cancel 将当前的 touchesBegin/Move/End 系列回调打断。随后系统将对应的 UIGestureRecognizer 标记为待处理。</p></li> <li><p>苹果注册了一个 Observer 监测 BeforeWaiting (Loop即将进入休眠) 事件，这个 Observer 的回调函数是 _UIGestureRecognizerUpdateObserver()，其内部会获取所有刚被标记为待处理的 GestureRecognizer，并执行GestureRecognizer 的回调。</p></li> <li><p>当有 UIGestureRecognizer 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p></li></ul> <h2 id=\\\"_11-cadispalytimer和timer哪个更精确\\\"><a href=\\\"#_11-cadispalytimer和timer哪个更精确\\\" class=\\\"header-anchor\\\">#</a> 11.CADispalyTimer和Timer哪个更精确</h2> <p>CADisplayLink 更精确</p> <ul><li><p>iOS设备的屏幕刷新频率是固定的，CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。</p></li> <li><p>NSTimer的精确度就显得低了点，比如NSTimer的触发时间到的时候，runloop如果在阻塞状态，触发时间就会推迟到下一个runloop周期。并且 NSTimer新增了tolerance属性，让用户可以设置可以容忍的触发的时间的延迟范围。</p></li> <li><p>CADisplayLink使用场合相对专一，适合做UI的不停重绘，比如自定义动画引擎或者视频播放的渲染。NSTimer的使用范围要广泛的多，各种需要单次或者循环定时处理的任务都可以使用。在UI相关的动画或者显示内容使用 CADisplayLink比起用NSTimer的好处就是我们不需要在格外关心屏幕的刷新频率了，因为它本身就是跟屏幕刷新同步的。</p></li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}