{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Debug-tips.md?vue&type=template&id=39e732d6&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Debug-tips.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"调试技巧\\\"><a href=\\\"#调试技巧\\\" class=\\\"header-anchor\\\">#</a> 调试技巧</h1> <h2 id=\\\"_1-lldb常用的调试命令？\\\"><a href=\\\"#_1-lldb常用的调试命令？\\\" class=\\\"header-anchor\\\">#</a> 1.LLDB常用的调试命令？</h2> <ul><li><p>po：print object的缩写，表示显示对象的文本描述，如果对象不存在则打印nil。</p></li> <li><p>p：可以用来打印基本数据类型。</p></li> <li><p>call：执行一段代码 如：call NSLog(@&quot;%@&quot;, @&quot;yang&quot;)</p></li> <li><p>expr：动态执行指定表达式</p></li> <li><p>bt：打印当前线程堆栈信息 （bt all 打印所有线程堆栈信息）</p></li> <li><p>image：常用来寻找栈地址对应代码位置 如：image lookup --address 0xxxx</p></li></ul> <h2 id=\\\"_2-断点调试\\\"><a href=\\\"#_2-断点调试\\\" class=\\\"header-anchor\\\">#</a> 2.断点调试</h2> <ul><li><p>条件断点</p> <p>打上断点之后，对断点进行编辑，设置相应过滤条件。下面简单的介绍一下条件设置：</p> <p>Condition：返回一个布尔值，当布尔值为真触发断点，一般里面我们可以写一个表达式。</p> <p>Ignore：忽略前N次断点，到N+1次再触发断点。</p> <p>Action：断点触发事件，分为六种：</p> <ul><li><p>AppleScript：执行脚本。</p></li> <li><p>Capture GPU Frame：用于OpenGL ES调试，捕获断点处GPU当前绘制帧。</p></li> <li><p>Debugger Command：和控制台中输入LLDB调试命令一致。</p></li> <li><p>Log Message：输出自定义格式信息至控制台。</p></li> <li><p>Shell Command：接收命令文件及相应参数列表，Shell Command是异步执行的，只有勾选“Wait until done”才会等待Shell命令执行完在执行调试。</p></li> <li><p>Sound：断点触发时播放声音。</p></li></ul> <p>Options(Automatically continue after evaluating actions选项)：选中后，表示断点不会终止程序的运行。</p></li> <li><p>异常断点</p> <p>异常断点可以快速定位不满足特定条件的异常，比如常见的数组越界，这时候很难通过异常信息定位到错误所在位置。这个时候异常断点就可以发挥作用了。</p> <p>Exception：可以选择抛出异常对象类型：OC或C++。</p> <p>Break：选择断点接收的抛出异常来源是Throw还是Catch语句。</p></li> <li><p>符号断点</p> <p>符号断点的创建方式和异常断点一样一样的，在符号断点中可以指定要中断执行的方法：</p> <p>Symbol:[类名 方法名]可以执行到指定类的指定方法中开始断点。</p></li></ul> <h2 id=\\\"_3-ios-常见的崩溃类型有哪些？\\\"><a href=\\\"#_3-ios-常见的崩溃类型有哪些？\\\" class=\\\"header-anchor\\\">#</a> 3.iOS 常见的崩溃类型有哪些？</h2> <ul><li><p>unrecognized selector crash</p></li> <li><p>KVO crash</p></li> <li><p>NSNotification crash</p></li> <li><p>NSTimer crash</p></li> <li><p>Container crash</p></li> <li><p>NSString crash</p></li> <li><p>Bad Access crash （野指针）</p></li> <li><p>UI not on Main Thread Crash</p></li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}