{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Data-structure.md?vue&type=template&id=1b95ced9&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Data-structure.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h1',{attrs:{\"id\":\"数据结构\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#数据结构\"}},[_vm._v(\"#\")]),_vm._v(\" 数据结构\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_1-数据结构的存储一般常用的有几种？各有什么特点？\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_1-数据结构的存储一般常用的有几种？各有什么特点？\"}},[_vm._v(\"#\")]),_vm._v(\" 1.数据结构的存储一般常用的有几种？各有什么特点？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"数据结构的存储一般常用的有两种 顺序存储结构 和 链式存储结构\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"顺序存储结构:\")]),_vm._v(\" \"),_c('p',[_vm._v(\"比如，数组，1-2-3-4-5-6-7-8-9-10，存储是按顺序的。再比如栈和队列等\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"链式存储结构:\")]),_vm._v(\" \"),_c('p',[_vm._v(\"比如，数组，1-2-3-4-5-6-7-8-9-10，链式存储就不一样了 1(地址)-2(地址)-7(地址)-4(地址)-5(地址)-9(地址)-8(地址)-3(地址)-6(地址)-10(地址)。每个数字后面跟着一个地址 而且存储形式不再是顺序\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_2-集合结构-线性结构-树形结构-图形结构\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_2-集合结构-线性结构-树形结构-图形结构\"}},[_vm._v(\"#\")]),_vm._v(\" 2.集合结构 线性结构 树形结构 图形结构\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"集合结构\")]),_vm._v(\" \"),_c('p',[_vm._v(\"一个集合，就是一个圆圈中有很多个元素，元素与元素之间没有任何关系  这个很简单\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"线性结构\")]),_vm._v(\" \"),_c('p',[_vm._v(\"一个条线上站着很多个人。 这条线不一定是直的。也可以是弯的。也可以是值的 相当于一条线被分成了好几段的样子 （发挥你的想象力）。 线性结构是一对一的关系\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"树形结构\")]),_vm._v(\" \"),_c('p',[_vm._v(\"做开发的肯定或多或少的知道xml 解析  树形结构跟他非常类似。也可以想象成一个金字塔。树形结构是一对多的关系\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"图形结构\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这个就比较复杂了。他呢 无穷。无边  无向（没有方向）图形机构 你可以理解为多对多 类似于我们人的交集关系\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_3-单向链表-双向链表-循环链表\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_3-单向链表-双向链表-循环链表\"}},[_vm._v(\"#\")]),_vm._v(\" 3.单向链表 双向链表 循环链表\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"单向链表 A->B->C->D->E->F->G->H. 这就是单向链表 H 是头 A 是尾 像一个只有一个头的火车一样 只能一个头拉着跑\\n\"),_c('img',{attrs:{\"src\":\"https://qn.nobady.cn/iOS/03-01.png\",\"alt\":\"单向链表\"}})])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"双向链表\\n\"),_c('img',{attrs:{\"src\":\"https://qn.nobady.cn/iOS/03-02.png\",\"alt\":\"双向链表\"}})])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"循环链表\")]),_vm._v(\" \"),_c('p',[_vm._v(\"循环链表是与单向链表一样，是一种链式的存储结构，所不同的是，循环链表的最后一个结点的指针是指向该循环链表的第一个结点或者表头结点，从而构成一个环形的链。发挥想象力  A->B->C->D->E->F->G->H->A. 绕成一个圈。就像蛇吃自己的这就是循环  不需要去死记硬背哪些理论知识。\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_4-数组和链表区别\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_4-数组和链表区别\"}},[_vm._v(\"#\")]),_vm._v(\" 4.数组和链表区别\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"数组\")]),_vm._v(\" \"),_c('p',[_vm._v(\"数组元素在内存上连续存放，可以通过下标查找元素；插入、删除需要移动大量元素，比较适用于元素很少变化的情况\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"链表\")]),_vm._v(\" \"),_c('p',[_vm._v(\"链表中的元素在内存中不是顺序存储的，查找慢，插入、删除只需要对元素指针重新赋值，效率高\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_5-堆、栈和队列\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_5-堆、栈和队列\"}},[_vm._v(\"#\")]),_vm._v(\" 5.堆、栈和队列\")]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"堆\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#堆\"}},[_vm._v(\"#\")]),_vm._v(\" 堆\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"堆是一种经过排序的树形数据结构，每个节点都有一个值，通常我们所说的堆的数据结构是指二叉树。所以堆在数据结构中通常可以被看做是一棵树的数组对象。而且堆需要满足一下两个性质：\")]),_vm._v(\" \"),_c('p',[_vm._v(\"1）堆中某个节点的值总是不大于或不小于其父节点的值；\")]),_vm._v(\" \"),_c('p',[_vm._v(\"2）堆总是一棵完全二叉树。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"堆分为两种情况，有最大堆和最小堆。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆，在一个摆放好元素的最小堆中，父结点中的元素一定比子结点的元素要小，但对于左右结点的大小则没有规定谁大谁小。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"堆常用来实现优先队列，堆的存取是随意的，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书，书架这种机制不同于箱子，我们可以直接取出我们想要的书。\")])])]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"栈\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#栈\"}},[_vm._v(\"#\")]),_vm._v(\" 栈\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"栈是限定仅在表尾进行插入和删除操作的线性表。我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈的特殊之处在于它限制了这个线性表的插入和删除位置，它始终只在栈顶进行。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"栈是一种具有后进先出的数据结构，又称为后进先出的线性表，简称 LIFO（Last In First Out）结构。也就是说后存放的先取，先存放的后取，这就类似于我们要在取放在箱子底部的东西（放进去比较早的物体），我们首先要移开压在它上面的物体（放进去比较晚的物体）。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"堆栈中定义了一些操作。两个最重要的是PUSH和POP。PUSH操作在堆栈的顶部加入一个元素。POP操作相反，在堆栈顶部移去一个元素，并将堆栈的大小减一。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"栈的应用—递归\")])])]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"队列\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#队列\"}},[_vm._v(\"#\")]),_vm._v(\" 队列\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"队列是只允许在一端进行插入操作、而在另一端进行删除操作的线性表。允许插入的一端称为队尾，允许删除的一端称为队头。它是一种特殊的线性表，特殊之处在于它只允许在表的前端进行删除操作，而在表的后端进行插入操作，和栈一样，队列是一种操作受限制的线性表。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"队列是一种先进先出的数据结构，又称为先进先出的线性表，简称 FIFO（First In First Out）结构。也就是说先放的先取，后放的后取，就如同行李过安检的时候，先放进去的行李在另一端总是先出来，后放入的行李会在最后面出来。\")])])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"_6-输入一棵二叉树的根结点，求该树的深度？\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_6-输入一棵二叉树的根结点，求该树的深度？\"}},[_vm._v(\"#\")]),_vm._v(\" 6.输入一棵二叉树的根结点，求该树的深度？\")]),_vm._v(\" \"),_c('p',[_vm._v(\"二叉树的结点定义如下：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-c line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-c\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"struct\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token class-name\"}},[_vm._v(\"BinaryTreeNode\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n\\t\"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" m_nValue ；\\n\\tBinaryTreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" m_pLeft\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\tBinarvTreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" m_pRight ；\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br')])]),_c('ul',[_c('li',[_vm._v(\"如果一棵树只有一个结点，它的深度为1。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"如果根结点只有左子树而没有右子树，那么树的深度应该是其左子树的深度加1；同样如果根结点只有右子树而没有左子树，那么树的深度应该是其右子树的深度加1。\")]),_vm._v(\" \"),_c('li',[_vm._v(\"如果既有右子树又有左子树，那该树的深度就是其左、右子树深度的较大值再加1。\")])]),_vm._v(\" \"),_c('div',{staticClass:\"language-c line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-c\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"TreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"==\")]),_vm._v(\" nullptr\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n        \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" left \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" right \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"?\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"+\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"+\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br')])]),_c('h2',{attrs:{\"id\":\"_7-输入一课二叉树的根结点，判断该树是不是平衡二叉树？\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#_7-输入一课二叉树的根结点，判断该树是不是平衡二叉树？\"}},[_vm._v(\"#\")]),_vm._v(\" 7.输入一课二叉树的根结点，判断该树是不是平衡二叉树？\")]),_vm._v(\" \"),_c('ul',[_c('li',[_c('p',[_vm._v(\"重复遍历结点\")]),_vm._v(\" \"),_c('p',[_vm._v(\"先求出根结点的左右子树的深度，然后判断它们的深度相差不超过1，如果否，则不是一棵二叉树；如果是，再用同样的方法分别判断左子树和右子树是否为平衡二叉树，如果都是，则这就是一棵平衡二叉树。\")])]),_vm._v(\" \"),_c('li',[_c('p',[_vm._v(\"遍历一遍结点\")]),_vm._v(\" \"),_c('p',[_vm._v(\"遍历结点的同时记录下该结点的深度，避免重复访问。\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"方法1:\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-c line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-c\"}},[_c('code',[_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"struct\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token class-name\"}},[_vm._v(\"TreeNode\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" val\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    TreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    TreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n \\n\"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"TreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"==\")]),_c('span',{pre:true,attrs:{\"class\":\"token constant\"}},[_vm._v(\"NULL\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n        \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" right\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"?\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"+\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"+\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n \\nbool \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalanced\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"TreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"==\")]),_c('span',{pre:true,attrs:{\"class\":\"token constant\"}},[_vm._v(\"NULL\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n        \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" true\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" right\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"TreeDepth\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" diff\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"-\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"diff\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"||\")]),_vm._v(\" diff\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"<\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"-\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\"\\n        \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" false\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalanced\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"&&\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalanced\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"10\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"11\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"12\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"13\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"14\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"15\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"16\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"17\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"18\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"19\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"20\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"21\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"22\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"23\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"24\")]),_c('br')])]),_c('p',[_vm._v(\"方法2：\")]),_vm._v(\" \"),_c('div',{staticClass:\"language-c line-numbers-mode\"},[_c('pre',{pre:true,attrs:{\"class\":\"language-c\"}},[_c('code',[_vm._v(\"bool \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalanced_1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"TreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"&\")]),_vm._v(\" depth\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"==\")]),_c('span',{pre:true,attrs:{\"class\":\"token constant\"}},[_vm._v(\"NULL\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n        depth\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n        \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" true\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" diff\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalanced_1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"&&\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalanced_1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"->\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n        diff\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"-\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n        \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"if\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"diff\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"<=\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"||\")]),_vm._v(\" diff\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">=\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"-\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n            depth\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\">\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"?\")]),_vm._v(\"left\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"+\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\":\")]),_vm._v(\"right\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"+\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n            \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" true\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n        \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" false\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\"\\n \\nbool \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalancedTree\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"TreeNode\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"*\")]),_vm._v(\" pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"{\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"int\")]),_vm._v(\" depth\"),_c('span',{pre:true,attrs:{\"class\":\"token operator\"}},[_vm._v(\"=\")]),_c('span',{pre:true,attrs:{\"class\":\"token number\"}},[_vm._v(\"0\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n    \"),_c('span',{pre:true,attrs:{\"class\":\"token keyword\"}},[_vm._v(\"return\")]),_vm._v(\" \"),_c('span',{pre:true,attrs:{\"class\":\"token function\"}},[_vm._v(\"IsBalanced_1\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"(\")]),_vm._v(\"pRoot\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\",\")]),_vm._v(\"depth\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\")\")]),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\";\")]),_vm._v(\"\\n\"),_c('span',{pre:true,attrs:{\"class\":\"token punctuation\"}},[_vm._v(\"}\")]),_vm._v(\" \\n\")])]),_vm._v(\" \"),_c('div',{staticClass:\"line-numbers-wrapper\"},[_c('span',{staticClass:\"line-number\"},[_vm._v(\"1\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"2\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"3\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"4\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"5\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"6\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"7\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"8\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"9\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"10\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"11\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"12\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"13\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"14\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"15\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"16\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"17\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"18\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"19\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"20\")]),_c('br'),_c('span',{staticClass:\"line-number\"},[_vm._v(\"21\")]),_c('br')])])])}]\n\nexport { render, staticRenderFns }"]}