{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/H5/vue.md?vue&type=template&id=1d4bfce8&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/H5/vue.md","mtime":1585449040011},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"常见编码规范\"><a class=\"header-anchor\" href=\"#常见编码规范\">#</a> 常见编码规范</h1>\n<ul>\n<li>将 js 脚本放在页面底部，加快渲染页面</li>\n<li>将 js 脚本将脚本成组打包，减少请求</li>\n<li>使用非阻塞方式下载 js 脚本</li>\n<li>尽量使用局部变量来保存全局变量</li>\n<li>遵循严格模式：&quot;use strict&quot;;</li>\n<li>尽量减少使用闭包</li>\n<li>减少对象成员嵌套</li>\n<li>缓存DOM节点访问</li>\n<li>避免使用eval()和Function()构造器</li>\n<li>尽量使用直接量取创建对象和数组</li>\n<li>最小化重绘(repaint)和回流(reflow)</li>\n</ul>\n<h3 id=\"为什么js要放到body尾部？\"><a class=\"header-anchor\" href=\"#为什么js要放到body尾部？\">#</a> 为什么JS要放到body尾部？</h3>\n<p>如果JS需要绑定操作DOM，那么放在header中如果处理不当就不会绑定到DOM</p>\n<p>**JS 引擎是独立于渲染引擎存在的。**我们的 JS 代码在文档的何处插入，就在何处执行。当 HTML 解析器遇到一个 script 标签时，它会暂停渲染过程，将控制权交给 JS 引擎。JS 引擎对内联的 JS 代码会直接执行，对外部 JS 文件还要先获取到脚本、再进行执行。等 JS 引擎运行完毕，浏览器又会把控制权还给渲染引擎，继续 CSSOM 和 DOM 的构建。</p>\n<p>浏览器之所以让 JS 阻塞其它的活动，是因为它不知道 JS 会做什么改变，担心如果不阻止后续的操作，会造成混乱。</p>\n<p>结论：</p>\n<ul>\n<li><strong>如果JS在header中，浏览器会阻塞并等待JS加载完毕并执行</strong></li>\n<li><strong>如果JS在body尾部，览器会进行一次提前渲染，从而提前首屏出现时间</strong></li>\n</ul>\n<p>参考demo: 执行<code>/性能优化/testDemo/slowServer/index.js</code>，注意查看终端</p>\n<h3 id=\"非核心代码的异步加载\"><a class=\"header-anchor\" href=\"#非核心代码的异步加载\">#</a> 非核心代码的异步加载</h3>\n<ul>\n<li>动态脚本加载\n<ul>\n<li>使用JS创建一个script标签再插入到页面中</li>\n</ul>\n</li>\n<li>defer（IE）\n<ul>\n<li>整个HTML<strong>解析完</strong>后才会执行，如果是多个，按照加载顺序依次执行</li>\n</ul>\n</li>\n<li>async\n<ul>\n<li><strong>加载完</strong>之后立即执行，如果是多个，执行和加载顺序无关</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"header中meta\"><a class=\"header-anchor\" href=\"#header中meta\">#</a> header中meta</h3>\n<p>兼容性配置，让IE使用最高级的Edge渲染，如果有chrome就使用chrome渲染。</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>IE=Edge,chrome=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>如果是双核浏览器，优先使用webkit引擎</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>render<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>webkit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"使用节流和防抖\"><a class=\"header-anchor\" href=\"#使用节流和防抖\">#</a> 使用节流和防抖</h3>\n<h3 id=\"懒加载\"><a class=\"header-anchor\" href=\"#懒加载\">#</a> 懒加载</h3>\n<p>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。\n对于图片来说，先设置图片标签的 src 属性为一张占位图或为空，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 src 属性，这样图片就会去下载资源，实现了图片懒加载。</p>\n</div>\n",null]}