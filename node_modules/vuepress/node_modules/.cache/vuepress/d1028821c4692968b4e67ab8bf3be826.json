{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Arithmetic.md?vue&type=template&id=0af81dbb&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Arithmetic.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"算法\"><a class=\"header-anchor\" href=\"#算法\">#</a> 算法</h1>\n<h2 id=\"_1-时间复杂度\"><a class=\"header-anchor\" href=\"#_1-时间复杂度\">#</a> 1.时间复杂度</h2>\n<ul>\n<li>\n<p>时间频度</p>\n<p>一个算法执行所耗费的时间,从理论上是不能算出来的,必须上机运行测试才能知道.但我们不可能也没有必要对每个算法都上机测试,只需知道哪个算法花费的时间多,哪个算法花费的时间少就可以了.并且一个算法花费的时间与算法中语句的执行次数成正比例,哪个算法中语句执行次数多,它花费时间就多.一个算法中的语句执行次数称为语句频度或时间频度.记为T(n).</p>\n</li>\n<li>\n<p>时间复杂度</p>\n<p>一般情况下,算法中基本操作重复执行的次数是问题规模n的某个函数,用T(n)表示,若有某个辅助函数f(n),使得当n趋近于无穷大时,T（n)/f(n)的极限值为不等于零的常数,则称f(n)是T(n)的同数量级函数.记作T(n)=O(f(n)),称O(f(n)) 为算法的渐进时间复杂度,简称时间复杂度.</p>\n</li>\n<li>\n<p>在各种不同算法中,若算法中语句执行次数为一个常数,则时间复杂度为O(1),另外,在时间频度不相同时,时间复杂度有可能相同,如T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同,但时间复杂度相同,都为O(n2).</p>\n</li>\n<li>\n<p>按数量级递增排列,常见的时间复杂度有：</p>\n<p>O(1)称为常量级，算法的时间复杂度是一个常数。</p>\n<p>O(n)称为线性级，时间复杂度是数据量n的线性函数。</p>\n<p>O(n²)称为平方级，与数据量n的二次多项式函数属于同一数量级。</p>\n<p>O(n³)称为立方级，是n的三次多项式函数。</p>\n<p>O(logn)称为对数级，是n的对数函数。</p>\n<p>O(nlogn)称为介于线性级和平方级之间的一种数量级</p>\n<p>O(2ⁿ)称为指数级，与数据量n的指数函数是一个数量级。</p>\n<p>O(n!)称为阶乘级，与数据量n的阶乘是一个数量级。</p>\n<p>它们之间的关系是： O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n²)&lt;O(n³)&lt;O(2ⁿ)&lt;O(n!)，随着问题规模n的不断增大,上述时间复杂度不断增大,算法的执行效率越低.</p>\n</li>\n</ul>\n<h2 id=\"_2-空间复杂度\"><a class=\"header-anchor\" href=\"#_2-空间复杂度\">#</a> 2.空间复杂度</h2>\n<ul>\n<li>评估执行程序所需的存储空间。可以估算出程序对计算机内存的使用程度。不包括算法程序代码和所处理的数据本身所占空间部分。通常用所使用额外空间的字节数表示。其算法比较简单，记为S(n)=O(f(n))，其中，n表示问题规模。</li>\n</ul>\n<h2 id=\"_3-常用的排序算法\"><a class=\"header-anchor\" href=\"#_3-常用的排序算法\">#</a> 3.常用的排序算法</h2>\n<ul>\n<li>\n<p>选择排序、冒泡排序、插入排序三种排序算法可以总结为如下：</p>\n<p>都将数组分为已排序部分和未排序部分。</p>\n<p>选择排序将已排序部分定义在左端，然后选择未排序部分的最小元素和未排序部分的第一个元素交换。</p>\n<p>冒泡排序将已排序部分定义在右端，在遍历未排序部分的过程执行交换，将最大元素交换到最右端。</p>\n<p>插入排序将已排序部分定义在左端，将未排序部分元的第一个元素插入到已排序部分合适的位置。</p>\n</li>\n</ul>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token comment\">/** \n *\t【选择排序】：最值出现在起始端\n *\t\n *\t第1趟：在n个数中找到最小(大)数与第一个数交换位置\n *\t第2趟：在剩下n-1个数中找到最小(大)数与第二个数交换位置\n *\t重复这样的操作...依次与第三个、第四个...数交换位置\n *\t第n-1趟，最终可实现数据的升序（降序）排列。\n *\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//趟数</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//比较次数</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">/** \n *\t【冒泡排序】：相邻元素两两比较，比较完一趟，最值出现在末尾\n *\t第1趟：依次比较相邻的两个数，不断交换（小数放前，大数放后）逐个推进，最值最后出现在第n个元素位置\n *\t第2趟：依次比较相邻的两个数，不断交换（小数放前，大数放后）逐个推进，最值最后出现在第n-1个元素位置\n *\t ……   ……\n *\t第n-1趟：依次比较相邻的两个数，不断交换（小数放前，大数放后）逐个推进，最值最后出现在第2个元素位置\t\n */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">bublleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//趟数</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//比较次数</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">/**\n *\t折半查找：优化查找时间（不用遍历全部数据）\n *\n *\t折半查找的原理：\n *   1> 数组必须是有序的\n *   2> 必须已知min和max（知道范围）\n *   3> 动态计算mid的值，取出mid对应的值进行比较\n *   4> 如果mid对应的值大于要查找的值，那么max要变小为mid-1\n *   5> 如果mid对应的值小于要查找的值，那么min要变大为mid+1\n *\n */</span> \n \n<span class=\"token comment\">// 已知一个有序数组, 和一个key, 要求从数组中找到key对应的索引位置 </span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">findKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max <span class=\"token operator\">=</span> length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//计算中间值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            min <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            max <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_4-字符串反转\"><a class=\"header-anchor\" href=\"#_4-字符串反转\">#</a> 4.字符串反转</h2>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">void</span> char_reverse <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cha<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 定义头部指针</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>begin <span class=\"token operator\">=</span> cha<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义尾部指针</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>end <span class=\"token operator\">=</span> cha <span class=\"token operator\">+</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>cha<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">char</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>begin<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>begin<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_5-链表反转（头差法）\"><a class=\"header-anchor\" href=\"#_5-链表反转（头差法）\">#</a> 5.链表反转（头差法）</h2>\n<p>.h声明文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;Foundation/Foundation.h></span>\n\n<span class=\"token comment\">// 定义一个链表</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n@interface ReverseList <span class=\"token operator\">:</span> NSObject\n\n<span class=\"token comment\">// 链表反转</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 构造一个链表</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> <span class=\"token function\">constructList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 打印链表中的数据</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n@end\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div><!--beforeend--></div><!--afterend--><p>.m实现文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"ReverseList.h\"</span>\n\n@implementation ReverseList\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 定义遍历指针，初始化为头结点</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 反转后的链表头部</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>newH <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 遍历链表</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// 记录下一个结点</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 当前结点的next指向新链表头部</span>\n        p<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> newH<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 更改新链表头部为当前结点</span>\n        newH <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 移动p指针</span>\n        p <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 返回反转后的链表头结点</span>\n    <span class=\"token keyword\">return</span> newH<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> <span class=\"token function\">constructList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 头结点定义</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>head <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 记录当前尾结点</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        node<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 头结点为空，新结点即为头结点</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            head <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 当前结点的next为新结点</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            cur<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">// 设置当前结点为新结点</span>\n        cur <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node is %d \\n\"</span><span class=\"token punctuation\">,</span> temp<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n@end\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_6-有序数组合并\"><a class=\"header-anchor\" href=\"#_6-有序数组合并\">#</a> 6.有序数组合并</h2>\n<p>.h声明文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;Foundation/Foundation.h></span>\n\n@interface MergeSortedList <span class=\"token operator\">:</span> NSObject\n<span class=\"token comment\">// 将有序数组a和b的值合并到一个数组result当中，且仍然保持有序</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">mergeList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> aLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n@end\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>.m实现文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"MergeSortedList.h\"</span>\n\n@implementation MergeSortedList\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">mergeList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> aLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历数组a的指针</span>\n    <span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历数组b的指针</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录当前存储位置</span>\n    \n    <span class=\"token comment\">// 任一数组没有到达边界则进行遍历</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> aLen <span class=\"token operator\">&amp;&amp;</span> q <span class=\"token operator\">&lt;</span> bLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 如果a数组对应位置的值小于b数组对应位置的值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 存储a数组的值</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 移动a数组的遍历指针</span>\n            p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 存储b数组的值</span>\n            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 移动b数组的遍历指针</span>\n            q<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 指向合并结果的下一个存储位置</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 如果a数组有剩余</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">&lt;</span> aLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 将a数组剩余部分拼接到合并结果的后面</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 如果b数组有剩余</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">&lt;</span> bLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 将b数组剩余部分拼接到合并结果的后面</span>\n        result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>q<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n@end\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_7-查找第一个只出现一次的字符（hash查找）\"><a class=\"header-anchor\" href=\"#_7-查找第一个只出现一次的字符（hash查找）\">#</a> 7.查找第一个只出现一次的字符（Hash查找）</h2>\n<p>.h声明文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;Foundation/Foundation.h></span>\n\n@interface HashFind <span class=\"token operator\">:</span> NSObject\n\n<span class=\"token comment\">// 查找第一个只出现一次的字符</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">findFirstChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> cha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n@end\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>.m实现文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"HashFind.h\"</span>\n\n@implementation HashFind\n\n<span class=\"token keyword\">char</span> <span class=\"token function\">findFirstChar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> cha<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> result <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 定义一个数组 用来存储各个字母出现次数</span>\n    <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 对数组进行初始化操作</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">256</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 定义一个指针 指向当前字符串头部</span>\n    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> cha<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 遍历每个字符</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 在字母对应存储位置 进行出现次数+1操作</span>\n        array<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 将P指针重新指向字符串头部</span>\n    p <span class=\"token operator\">=</span> cha<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 遍历每个字母的出现次数</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 遇到第一个出现次数为1的字符，打印结果</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 反之继续向后遍历</span>\n        p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@end\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_8-查找两个子视图的共同父视图\"><a class=\"header-anchor\" href=\"#_8-查找两个子视图的共同父视图\">#</a> 8.查找两个子视图的共同父视图</h2>\n<p>.h声明文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;Foundation/Foundation.h></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;UIKit/UIKit.h></span>\n@interface CommonSuperFind <span class=\"token operator\">:</span> NSObject\n\n<span class=\"token comment\">// 查找两个视图的共同父视图</span>\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSArray<span class=\"token operator\">&lt;</span>UIView <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>findCommonSuperView<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>view other<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>viewOther<span class=\"token punctuation\">;</span>\n\n@end\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>.m实现文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"CommonSuperFind.h\"</span>\n\n@implementation CommonSuperFind\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSArray <span class=\"token operator\">&lt;</span>UIView <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>findCommonSuperView<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>viewOne other<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>viewOther\n<span class=\"token punctuation\">{</span>\n    NSMutableArray <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 查找第一个视图的所有父视图</span>\n    NSArray <span class=\"token operator\">*</span>arrayOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self findSuperViews<span class=\"token operator\">:</span>viewOne<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 查找第二个视图的所有父视图</span>\n    NSArray <span class=\"token operator\">*</span>arrayOther <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>self findSuperViews<span class=\"token operator\">:</span>viewOther<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 越界限制条件</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>arrayOne<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>arrayOther<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 倒序方式获取各个视图的父视图</span>\n        UIView <span class=\"token operator\">*</span>superOne <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arrayOne objectAtIndex<span class=\"token operator\">:</span>arrayOne<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        UIView <span class=\"token operator\">*</span>superOther <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arrayOther objectAtIndex<span class=\"token operator\">:</span>arrayOther<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 比较如果相等 则为共同父视图</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>superOne <span class=\"token operator\">==</span> superOther<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">[</span>result addObject<span class=\"token operator\">:</span>superOne<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 如果不相等，则结束遍历</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>NSArray <span class=\"token operator\">&lt;</span>UIView <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>findSuperViews<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>UIView <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>view\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 初始化为第一父视图</span>\n    UIView <span class=\"token operator\">*</span>temp <span class=\"token operator\">=</span> view<span class=\"token punctuation\">.</span>superview<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 保存结果的数组</span>\n    NSMutableArray <span class=\"token operator\">*</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>result addObject<span class=\"token operator\">:</span>temp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 顺着superview指针一直向上查找</span>\n        temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>superview<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@end\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_9-无序数组中的中位数-快排思想\"><a class=\"header-anchor\" href=\"#_9-无序数组中的中位数-快排思想\">#</a> 9.无序数组中的中位数(快排思想)</h2>\n<p>.h声明文件</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> &lt;Foundation/Foundation.h></span>\n\n@interface MedianFind <span class=\"token operator\">:</span> NSObject\n\n<span class=\"token comment\">// 无序数组中位数查找</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">findMedian</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> aLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n@end\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token punctuation\">.</span>m实现文件\n<span class=\"token macro property\">#<span class=\"token directive keyword\">import</span> \"MedianFind.h\"</span>\n\n@implementation MedianFind\n\n<span class=\"token comment\">//求一个无序数组的中位数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">findMedian</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> aLen<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> aLen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>aLen <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> div <span class=\"token operator\">=</span> <span class=\"token function\">PartSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>div <span class=\"token operator\">!=</span> mid<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">&lt;</span> div<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//左半区间找</span>\n            div <span class=\"token operator\">=</span> <span class=\"token function\">PartSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> div <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//右半区间找</span>\n            div <span class=\"token operator\">=</span> <span class=\"token function\">PartSort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> div <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//找到了</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">PartSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//选取关键字</span>\n    <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//左边找比key大的值</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>low<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token comment\">//右边找比key小的值</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">--</span>high<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//找到之后交换左右的值</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n@end\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br><span class=\"line-number\">37</span><br><span class=\"line-number\">38</span><br><span class=\"line-number\">39</span><br><span class=\"line-number\">40</span><br><span class=\"line-number\">41</span><br><span class=\"line-number\">42</span><br><span class=\"line-number\">43</span><br><span class=\"line-number\">44</span><br><span class=\"line-number\">45</span><br><span class=\"line-number\">46</span><br><span class=\"line-number\">47</span><br><span class=\"line-number\">48</span><br><span class=\"line-number\">49</span><br><span class=\"line-number\">50</span><br><span class=\"line-number\">51</span><br><span class=\"line-number\">52</span><br><span class=\"line-number\">53</span><br><span class=\"line-number\">54</span><br><span class=\"line-number\">55</span><br><span class=\"line-number\">56</span><br><span class=\"line-number\">57</span><br><span class=\"line-number\">58</span><br><span class=\"line-number\">59</span><br><span class=\"line-number\">60</span><br><span class=\"line-number\">61</span><br><span class=\"line-number\">62</span><br><span class=\"line-number\">63</span><br><span class=\"line-number\">64</span><br><span class=\"line-number\">65</span><br><span class=\"line-number\">66</span><br><span class=\"line-number\">67</span><br><span class=\"line-number\">68</span><br><span class=\"line-number\">69</span><br><span class=\"line-number\">70</span><br><span class=\"line-number\">71</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_10-给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\"><a class=\"header-anchor\" href=\"#_10-给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\">#</a> 10.给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</h2>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>viewDidLoad <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">[</span>super viewDidLoad<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    NSArray <span class=\"token operator\">*</span>oriArray <span class=\"token operator\">=</span> @<span class=\"token punctuation\">[</span>@<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>@<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>@<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>@<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>@<span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>@<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    BOOL isHaveNums <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>self twoNumSumWithTarget<span class=\"token operator\">:</span><span class=\"token number\">9</span> Array<span class=\"token operator\">:</span>oriArray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>isHaveNums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>BOOL<span class=\"token punctuation\">)</span>twoNumSumWithTarget<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>target Array<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>NSArray<span class=\"token operator\">&lt;</span>NSNumber <span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>array <span class=\"token punctuation\">{</span>\n    \n    NSMutableArray <span class=\"token operator\">*</span>finalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSMutableArray array<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> intValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> intValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                \n                <span class=\"token punctuation\">[</span>finalArray addObject<span class=\"token operator\">:</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">[</span>finalArray addObject<span class=\"token operator\">:</span>array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">NSLog</span><span class=\"token punctuation\">(</span>@<span class=\"token string\">\"%@\"</span><span class=\"token punctuation\">,</span>finalArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token keyword\">return</span> YES<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> NO<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br></div><!--beforeend--></div><!--afterend--></div>\n",null]}