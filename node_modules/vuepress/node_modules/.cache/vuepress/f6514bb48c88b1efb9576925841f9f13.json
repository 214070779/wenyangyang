{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/H5/vue.md?vue&type=template&id=028db312&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/H5/vue.md","mtime":1585449236933},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h3 id=\"v-bind和v-model的区别\"><a class=\"header-anchor\" href=\"#v-bind和v-model的区别\">#</a> v-bind和v-model的区别</h3>\n<p>1.v-bind用来绑定数据和属性以及表达式，缩写为'：'\n2.v-model使用在表单中，实现双向数据绑定的，在表单元素外使用不起作用</p>\n<h3 id=\"什么是-mvvm？\"><a class=\"header-anchor\" href=\"#什么是-mvvm？\">#</a> 什么是 mvvm？</h3>\n<p>MVVM 是 Model-View-ViewModel 的缩写。mvvm 是一种设计思想。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。</p>\n<p>在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。</p>\n<p>ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p>\n<h3 id=\"mvvm-和-mvc-区别？\"><a class=\"header-anchor\" href=\"#mvvm-和-mvc-区别？\">#</a> mvvm 和 mvc 区别？</h3>\n<p>mvc 和 mvvm 其实区别并不大。都是一种设计思想。主要就是 mvc 中 Controller 演变成 mvvm 中的 viewModel。mvvm 主要解决了 mvc 中大量的 DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验。和当 Model 频繁发生变化，开发者需要主动更新到 View 。</p>\n<h3 id=\"vue-的优点是什么？\"><a class=\"header-anchor\" href=\"#vue-的优点是什么？\">#</a> vue 的优点是什么？</h3>\n<ul>\n<li>低耦合。视图（View）可以独立于 Model 变化和修改，一个 ViewModel 可以绑定到不同的&quot;View&quot;上，当 View 变化的时候 Model 可以不变，当 Model 变化的时候 View 也可以不变。</li>\n<li>可重用性。你可以把一些视图逻辑放在一个 ViewModel 里面，让很多 view 重用这段视图逻辑。</li>\n<li>独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用 Expression Blend 可以很容易设计界面并生成 xml 代码。</li>\n<li>可测试。界面素来是比较难于测试的，而现在测试可以针对 ViewModel 来写。</li>\n</ul>\n<h3 id=\"请详细说下你对-vue-生命周期的理解？\"><a class=\"header-anchor\" href=\"#请详细说下你对-vue-生命周期的理解？\">#</a> 请详细说下你对 vue 生命周期的理解？</h3>\n<p>答：总共分为 8 个阶段创建前/后，载入前/后，更新前/后，销毁前/后。</p>\n<ul>\n<li>创建前/后： 在 beforeCreate 阶段，vue 实例的挂载元素 el 还没有。</li>\n<li>载入前/后：在 beforeMount 阶段，vue 实例的$el 和 data 都初始化了，但还是挂载之前为虚拟的 dom 节点，data.message 还未替换。在 mounted 阶段，vue 实例挂载完成，data.message 成功渲染。</li>\n<li>更新前/后：当 data 变化时，会触发 beforeUpdate 和 updated 方法。</li>\n<li>销毁前/后：在执行 destroy 方法后，对 data 的改变不会再触发周期函数，说明此时 vue 实例已经解除了事件监听以及和 dom 的绑定，但是 dom 结构依然存在</li>\n</ul>\n<h3 id=\"组件之间的传值？\"><a class=\"header-anchor\" href=\"#组件之间的传值？\">#</a> 组件之间的传值？</h3>\n<ol>\n<li>父组件与子组件传值</li>\n</ol>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>//父组件通过标签上面定义传值\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Main</span> <span class=\"token attr-name\">:obj</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Main</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">//引入子组件</span>\n    <span class=\"token keyword\">import</span> Main form <span class=\"token string\">\"./main\"</span>\n\n    exprot <span class=\"token keyword\">default</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span><span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                data<span class=\"token operator\">:</span><span class=\"token string\">\"我要向子组件传递数据\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//初始化组件</span>\n        components<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            Main\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n\n//子组件通过props方法接受数据\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>{{data}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    exprot <span class=\"token keyword\">default</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span><span class=\"token string\">\"son\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//接受父组件传值</span>\n        props<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br></div><!--beforeend--></div><!--afterend--><ol start=\"2\">\n<li>子组件向父组件传递数据</li>\n</ol>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code>//子组件通过$emit方法传递参数\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>events<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">//引入子组件</span>\n    <span class=\"token keyword\">import</span> Main form <span class=\"token string\">\"./main\"</span>\n\n    exprot <span class=\"token keyword\">default</span><span class=\"token punctuation\">{</span>\n        methods<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">events</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n\n//\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>{{data}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    exprot <span class=\"token keyword\">default</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span><span class=\"token string\">\"son\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//接受父组件传值</span>\n        props<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"active-class-是哪个组件的属性？\"><a class=\"header-anchor\" href=\"#active-class-是哪个组件的属性？\">#</a> active-class 是哪个组件的属性？</h3>\n<p>vue-router 模块的 router-link 组件。</p>\n<h3 id=\"嵌套路由怎么定义？\"><a class=\"header-anchor\" href=\"#嵌套路由怎么定义？\">#</a> 嵌套路由怎么定义？</h3>\n<p>在实际项目中我们会碰到多层嵌套的组件组合而成，但是我们如何实现嵌套路由呢？因此我们需要在 VueRouter 的参数中使用 children 配置，这样就可以很好的实现路由嵌套。\nindex.html，只有一个路由出口</p>\n<!--beforebegin--><div class=\"language-html line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- router-view 路由出口, 路由匹配到的组件将渲染在这里 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>main.js，路由的重定向，就会在页面一加载的时候，就会将 home 组件显示出来，因为重定向指向了 home 组件，redirect 的指向与 path 的必须一致。children 里面是子路由，当然子路由里面还可以继续嵌套子路由。</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueRouter<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//引入两个组件</span>\n\n<span class=\"token keyword\">import</span> home <span class=\"token keyword\">from</span> <span class=\"token string\">\"./home.vue\"</span>\n<span class=\"token keyword\">import</span> game <span class=\"token keyword\">from</span> <span class=\"token string\">\"./game.vue\"</span>\n<span class=\"token comment\">//定义路由</span>\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> redirect<span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//重定向,指向了home组件</span>\n    <span class=\"token punctuation\">{</span>\n        path<span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> home<span class=\"token punctuation\">,</span>\n        children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/home/game\"</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> game <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token comment\">//创建路由实例</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>routes<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    el<span class=\"token operator\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    router\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br></div><!--beforeend--></div><!--afterend--><p>home.vue，点击显示就会将子路由显示在出来，子路由的出口必须在父路由里面，否则子路由无法显示。</p>\n<h3 id=\"路由之间跳转？\"><a class=\"header-anchor\" href=\"#路由之间跳转？\">#</a> 路由之间跳转？</h3>\n<ul>\n<li>声明式（标签跳转） <code>&lt;router-link :to=&quot;index&quot;&gt;</code></li>\n<li>编程式（ js 跳转） <code>router.push('index')</code></li>\n</ul>\n<h3 id=\"懒加载（按需加载路由）（常考）\"><a class=\"header-anchor\" href=\"#懒加载（按需加载路由）（常考）\">#</a> 懒加载（按需加载路由）（常考）</h3>\n<p>webpack 中提供了 require.ensure()来实现按需加载。以前引入路由是通过 import 这样的方式引入，改为 const 定义的方式进行引入。</p>\n<ul>\n<li>不进行页面按需加载引入方式：</li>\n</ul>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">import</span>  home   <span class=\"token keyword\">from</span> <span class=\"token string\">'../../common/home.vue'</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>进行页面按需加载的引入方式：</li>\n</ul>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">const</span>  <span class=\"token function-variable function\">home</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> require<span class=\"token punctuation\">.</span><span class=\"token function\">ensure</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">r</span> <span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../../common/home.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"vuex-是什么？怎么使用？哪种功能场景使用它？\"><a class=\"header-anchor\" href=\"#vuex-是什么？怎么使用？哪种功能场景使用它？\">#</a> vuex 是什么？怎么使用？哪种功能场景使用它？</h3>\n<p>vue 框架中状态管理。在 main.js 引入 store，注入。新建了一个目录 store，….. export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p>\n<!--beforebegin--><div class=\"language-js line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 新建 store.js</span>\n<span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> vuex form <span class=\"token string\">'vuex'</span>\nvue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">vuex<span class=\"token punctuation\">.</span>store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...code</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//main.js</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span>\n<span class=\"token operator\">...</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"vue-router-有哪几种导航钩子\"><a class=\"header-anchor\" href=\"#vue-router-有哪几种导航钩子\">#</a> vue-router 有哪几种导航钩子?</h3>\n<p>三种</p>\n<ul>\n<li>全局导航钩子\n<ul>\n<li>router.beforeEach(to, from, next),</li>\n<li>router.beforeResolve(to, from, next),</li>\n<li>router.afterEach(to, from ,next)</li>\n</ul>\n</li>\n<li>组件内钩子\n<ul>\n<li>beforeRouteEnter,</li>\n<li>beforeRouteUpdate,</li>\n<li>beforeRouteLeave</li>\n</ul>\n</li>\n<li>单独路由独享组件\n<ul>\n<li>beforeEnter</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自定义指令-v-check-v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数\"><a class=\"header-anchor\" href=\"#自定义指令-v-check-v-focus-的方法有哪些-它有哪些钩子函数-还有哪些钩子函数参数\">#</a> 自定义指令(v-check, v-focus) 的方法有哪些? 它有哪些钩子函数? 还有哪些钩子函数参数</h3>\n<ul>\n<li>全局定义指令：在 vue 对象的 directive 方法里面有两个参数, 一个是指令名称, 另一个是函数。</li>\n<li>组件内定义指令：directives</li>\n<li>钩子函数: bind(绑定事件出发)、inserted(节点插入时候触发)、update(组件内相关更新)</li>\n<li>钩子函数参数： el、binding</li>\n</ul>\n<h3 id=\"说出至少-4-种-vue-当中的指令和它的用法\"><a class=\"header-anchor\" href=\"#说出至少-4-种-vue-当中的指令和它的用法\">#</a> 说出至少 4 种 vue 当中的指令和它的用法</h3>\n<p>v-if(判断是否隐藏)、v-for(把数据遍历出来)、v-bind(绑定属性)、v-model(实现双向绑定)</p>\n<h3 id=\"vue-的双向绑定的原理是什么-常考\"><a class=\"header-anchor\" href=\"#vue-的双向绑定的原理是什么-常考\">#</a> vue 的双向绑定的原理是什么(常考)</h3>\n<p>vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p>\n<p>具体步骤：\n第一步：需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter 这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</p>\n<p>第二步：compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p>\n<p>第三步：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是:</p>\n<ul>\n<li>在自身实例化时往属性订阅器(dep)里面添加自己</li>\n<li>自身必须有一个 update()方法</li>\n<li>待属性变动 dep.notice()通知时，能调用自身的 update() 方法，并触发 Compile 中绑定的回调，则功成身退。</li>\n</ul>\n<p>第四步：MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</p>\n<h2 id=\"vuex-相关\"><a class=\"header-anchor\" href=\"#vuex-相关\">#</a> vuex 相关</h2>\n<h3 id=\"vuex-有哪几种属性\"><a class=\"header-anchor\" href=\"#vuex-有哪几种属性\">#</a> vuex 有哪几种属性</h3>\n<p>有 5 种，分别是 state、getter、mutation、action、module</p>\n<h3 id=\"vuex-的-store-特性是什么\"><a class=\"header-anchor\" href=\"#vuex-的-store-特性是什么\">#</a> vuex 的 store 特性是什么</h3>\n<ul>\n<li>vuex 就是一个仓库，仓库里放了很多对象。其中 state 就是数据源存放地，对应于一般 vue 对象里面的 data</li>\n<li>state 里面存放的数据是响应式的，vue 组件从 store 读取数据，若是 store 中的数据发生改变，依赖这相数据的组件也会发生更新</li>\n<li>它通过 mapState 把全局的 state 和 getters 映射到当前组件的 computed 计算属性</li>\n</ul>\n<h3 id=\"vuex-的-getter-特性是什么\"><a class=\"header-anchor\" href=\"#vuex-的-getter-特性是什么\">#</a> vuex 的 getter 特性是什么</h3>\n<ul>\n<li>getter 可以对 state 进行计算操作，它就是 store 的计算属性</li>\n<li>虽然在组件内也可以做计算属性，但是 getters 可以在多给件之间复用</li>\n<li>如果一个状态只在一个组件内使用，是可以不用 getters</li>\n</ul>\n<h3 id=\"vuex-的-mutation-特性是什么\"><a class=\"header-anchor\" href=\"#vuex-的-mutation-特性是什么\">#</a> vuex 的 mutation 特性是什么</h3>\n<ul>\n<li>action 类似于 muation, 不同在于：action 提交的是 mutation,而不是直接变更状态</li>\n<li>action 可以包含任意异步操作</li>\n</ul>\n<h3 id=\"vue-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-action-中\"><a class=\"header-anchor\" href=\"#vue-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-action-中\">#</a> vue 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 action 中</h3>\n<p>如果请求来的数据不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 里</p>\n<p>如果被其他地方复用，请将请求放入 action 里，方便复用，并包装成 promise 返回</p>\n<h3 id=\"不用-vuex-会带来什么问题\"><a class=\"header-anchor\" href=\"#不用-vuex-会带来什么问题\">#</a> 不用 vuex 会带来什么问题</h3>\n<ul>\n<li>可维护性会下降，你要修改数据，你得维护 3 个地方</li>\n<li>可读性下降，因为一个组件里的数据，你根本就看不出来是从哪里来的</li>\n<li>增加耦合，大量的上传派发，会让耦合性大大的增加，本来 Vue 用 Component 就是为了减少耦合，现在这么用，和组件化的初衷相背</li>\n</ul>\n<h3 id=\"vuex-原理\"><a class=\"header-anchor\" href=\"#vuex-原理\">#</a> vuex 原理</h3>\n<p>vuex 仅仅是作为 vue 的一个插件而存在，不像 Redux,MobX 等库可以应用于所有框架，vuex 只能使用在 vue 上，很大的程度是因为其高度依赖于 vue 的 computed 依赖检测系统以及其插件系统，</p>\n<p>vuex 整体思想诞生于 flux,可其的实现方式完完全全的使用了 vue 自身的响应式设计，依赖监听、依赖收集都属于 vue 对对象 Property set get 方法的代理劫持。最后一句话结束 vuex 工作原理，vuex 中的 store 本质就是没有 template 的隐藏着的 vue 组件；</p>\n<h3 id=\"使用-vuex-只需执行-vue-use-vuex-，并在-vue-的配置中传入一个-store-对象的示例，store-是如何实现注入的？美团\"><a class=\"header-anchor\" href=\"#使用-vuex-只需执行-vue-use-vuex-，并在-vue-的配置中传入一个-store-对象的示例，store-是如何实现注入的？美团\">#</a> 使用 Vuex 只需执行 Vue.use(Vuex)，并在 Vue 的配置中传入一个 store 对象的示例，store 是如何实现注入的？<a href=\"https://tech.meituan.com/vuex_code_analysis.html\" target=\"_blank\" rel=\"noopener noreferrer\">美团<OutboundLink/></a></h3>\n<p>Vue.use(Vuex) 方法执行的是 install 方法，它实现了 Vue 实例对象的 init 方法封装和注入，使传入的 store 对象被设置到 Vue 上下文环境的$store 中。因此在 Vue Component 任意地方都能够通过 this.$store 访问到该 store。</p>\n<h3 id=\"state-内部支持模块配置和模块嵌套，如何实现的？美团\"><a class=\"header-anchor\" href=\"#state-内部支持模块配置和模块嵌套，如何实现的？美团\">#</a> state 内部支持模块配置和模块嵌套，如何实现的？<a href=\"https://tech.meituan.com/vuex_code_analysis.html\" target=\"_blank\" rel=\"noopener noreferrer\">美团<OutboundLink/></a></h3>\n<p>在 store 构造方法中有 makeLocalContext 方法，所有 module 都会有一个 local context，根据配置时的 path 进行匹配。所以执行如 dispatch('submitOrder', payload)这类 action 时，默认的拿到都是 module 的 local state，如果要访问最外层或者是其他 module 的 state，只能从 rootState 按照 path 路径逐步进行访问。</p>\n<h3 id=\"在执行-dispatch-触发-action-commit-同理-的时候，只需传入-type-payload-，action-执行函数中第一个参数-store-从哪里获取的？美团\"><a class=\"header-anchor\" href=\"#在执行-dispatch-触发-action-commit-同理-的时候，只需传入-type-payload-，action-执行函数中第一个参数-store-从哪里获取的？美团\">#</a> 在执行 dispatch 触发 action(commit 同理)的时候，只需传入(type, payload)，action 执行函数中第一个参数 store 从哪里获取的？<a href=\"https://tech.meituan.com/vuex_code_analysis.html\" target=\"_blank\" rel=\"noopener noreferrer\">美团<OutboundLink/></a></h3>\n<p>store 初始化时，所有配置的 action 和 mutation 以及 getters 均被封装过。在执行如 dispatch('submitOrder', payload)的时候，actions 中 type 为 submitOrder 的所有处理方法都是被封装后的，其第一个参数为当前的 store 对象，所以能够获取到 { dispatch, commit, state, rootState } 等数据。</p>\n<h3 id=\"vuex-如何区分-state-是外部直接修改，还是通过-mutation-方法修改的？美团\"><a class=\"header-anchor\" href=\"#vuex-如何区分-state-是外部直接修改，还是通过-mutation-方法修改的？美团\">#</a> Vuex 如何区分 state 是外部直接修改，还是通过 mutation 方法修改的？<a href=\"https://tech.meituan.com/vuex_code_analysis.html\" target=\"_blank\" rel=\"noopener noreferrer\">美团<OutboundLink/></a></h3>\n<p>Vuex 中修改 state 的唯一渠道就是执行 commit('xx', payload) 方法，其底层通过执行 this._withCommit(fn) 设置_committing 标志变量为 true，然后才能修改 state，修改完毕还需要还原_committing 变量。外部修改虽然能够直接修改 state，但是并没有修改_committing 标志位，所以只要 watch 一下 state，state change 时判断是否_committing 值为 true，即可判断修改的合法性。</p>\n<h3 id=\"调试时的-时空穿梭-功能是如何实现的？美团\"><a class=\"header-anchor\" href=\"#调试时的-时空穿梭-功能是如何实现的？美团\">#</a> 调试时的&quot;时空穿梭&quot;功能是如何实现的？<a href=\"https://tech.meituan.com/vuex_code_analysis.html\" target=\"_blank\" rel=\"noopener noreferrer\">美团<OutboundLink/></a></h3>\n<p>devtoolPlugin 中提供了此功能。因为 dev 模式下所有的 state change 都会被记录下来，'时空穿梭' 功能其实就是将当前的 state 替换为记录中某个时刻的 state 状态，利用 store.replaceState(targetState) 方法将执行 this._vm.state = state 实现。</p>\n<h2 id=\"axios\"><a class=\"header-anchor\" href=\"#axios\">#</a> axios</h2>\n<h3 id=\"axios-是什么？怎么使用？描述使用它实现登录功能的流程\"><a class=\"header-anchor\" href=\"#axios-是什么？怎么使用？描述使用它实现登录功能的流程\">#</a> axios 是什么？怎么使用？描述使用它实现登录功能的流程</h3>\n<p>axios 是请求后台资源的模块。 npm i axios -S</p>\n<p>如果发送的是跨域请求，需在配置文件中 config/index.js 进行配置</p>\n</div>\n",null]}