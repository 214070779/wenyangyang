{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Data-structure.md?vue&type=template&id=1b95ced9&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Data-structure.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"数据结构\"><a class=\"header-anchor\" href=\"#数据结构\">#</a> 数据结构</h1>\n<h2 id=\"_1-数据结构的存储一般常用的有几种？各有什么特点？\"><a class=\"header-anchor\" href=\"#_1-数据结构的存储一般常用的有几种？各有什么特点？\">#</a> 1.数据结构的存储一般常用的有几种？各有什么特点？</h2>\n<p>数据结构的存储一般常用的有两种 顺序存储结构 和 链式存储结构</p>\n<ul>\n<li>\n<p>顺序存储结构:</p>\n<p>比如，数组，1-2-3-4-5-6-7-8-9-10，存储是按顺序的。再比如栈和队列等</p>\n</li>\n<li>\n<p>链式存储结构:</p>\n<p>比如，数组，1-2-3-4-5-6-7-8-9-10，链式存储就不一样了 1(地址)-2(地址)-7(地址)-4(地址)-5(地址)-9(地址)-8(地址)-3(地址)-6(地址)-10(地址)。每个数字后面跟着一个地址 而且存储形式不再是顺序</p>\n</li>\n</ul>\n<h2 id=\"_2-集合结构-线性结构-树形结构-图形结构\"><a class=\"header-anchor\" href=\"#_2-集合结构-线性结构-树形结构-图形结构\">#</a> 2.集合结构 线性结构 树形结构 图形结构</h2>\n<ul>\n<li>\n<p>集合结构</p>\n<p>一个集合，就是一个圆圈中有很多个元素，元素与元素之间没有任何关系  这个很简单</p>\n</li>\n<li>\n<p>线性结构</p>\n<p>一个条线上站着很多个人。 这条线不一定是直的。也可以是弯的。也可以是值的 相当于一条线被分成了好几段的样子 （发挥你的想象力）。 线性结构是一对一的关系</p>\n</li>\n<li>\n<p>树形结构</p>\n<p>做开发的肯定或多或少的知道xml 解析  树形结构跟他非常类似。也可以想象成一个金字塔。树形结构是一对多的关系</p>\n</li>\n<li>\n<p>图形结构</p>\n<p>这个就比较复杂了。他呢 无穷。无边  无向（没有方向）图形机构 你可以理解为多对多 类似于我们人的交集关系</p>\n</li>\n</ul>\n<h2 id=\"_3-单向链表-双向链表-循环链表\"><a class=\"header-anchor\" href=\"#_3-单向链表-双向链表-循环链表\">#</a> 3.单向链表 双向链表 循环链表</h2>\n<ul>\n<li>\n<p>单向链表 A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G-&gt;H. 这就是单向链表 H 是头 A 是尾 像一个只有一个头的火车一样 只能一个头拉着跑\n<img src=\"https://qn.nobady.cn/iOS/03-01.png\" alt=\"单向链表\"></p>\n</li>\n<li>\n<p>双向链表\n<img src=\"https://qn.nobady.cn/iOS/03-02.png\" alt=\"双向链表\"></p>\n</li>\n<li>\n<p>循环链表</p>\n<p>循环链表是与单向链表一样，是一种链式的存储结构，所不同的是，循环链表的最后一个结点的指针是指向该循环链表的第一个结点或者表头结点，从而构成一个环形的链。发挥想象力  A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F-&gt;G-&gt;H-&gt;A. 绕成一个圈。就像蛇吃自己的这就是循环  不需要去死记硬背哪些理论知识。</p>\n</li>\n</ul>\n<h2 id=\"_4-数组和链表区别\"><a class=\"header-anchor\" href=\"#_4-数组和链表区别\">#</a> 4.数组和链表区别</h2>\n<ul>\n<li>\n<p>数组</p>\n<p>数组元素在内存上连续存放，可以通过下标查找元素；插入、删除需要移动大量元素，比较适用于元素很少变化的情况</p>\n</li>\n<li>\n<p>链表</p>\n<p>链表中的元素在内存中不是顺序存储的，查找慢，插入、删除只需要对元素指针重新赋值，效率高</p>\n</li>\n</ul>\n<h2 id=\"_5-堆、栈和队列\"><a class=\"header-anchor\" href=\"#_5-堆、栈和队列\">#</a> 5.堆、栈和队列</h2>\n<h4 id=\"堆\"><a class=\"header-anchor\" href=\"#堆\">#</a> 堆</h4>\n<ul>\n<li>\n<p>堆是一种经过排序的树形数据结构，每个节点都有一个值，通常我们所说的堆的数据结构是指二叉树。所以堆在数据结构中通常可以被看做是一棵树的数组对象。而且堆需要满足一下两个性质：</p>\n<p>1）堆中某个节点的值总是不大于或不小于其父节点的值；</p>\n<p>2）堆总是一棵完全二叉树。</p>\n</li>\n<li>\n<p>堆分为两种情况，有最大堆和最小堆。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆，在一个摆放好元素的最小堆中，父结点中的元素一定比子结点的元素要小，但对于左右结点的大小则没有规定谁大谁小。</p>\n</li>\n<li>\n<p>堆常用来实现优先队列，堆的存取是随意的，这就如同我们在图书馆的书架上取书，虽然书的摆放是有顺序的，但是我们想取任意一本时不必像栈一样，先取出前面所有的书，书架这种机制不同于箱子，我们可以直接取出我们想要的书。</p>\n</li>\n</ul>\n<h4 id=\"栈\"><a class=\"header-anchor\" href=\"#栈\">#</a> 栈</h4>\n<ul>\n<li>\n<p>栈是限定仅在表尾进行插入和删除操作的线性表。我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈的特殊之处在于它限制了这个线性表的插入和删除位置，它始终只在栈顶进行。</p>\n</li>\n<li>\n<p>栈是一种具有后进先出的数据结构，又称为后进先出的线性表，简称 LIFO（Last In First Out）结构。也就是说后存放的先取，先存放的后取，这就类似于我们要在取放在箱子底部的东西（放进去比较早的物体），我们首先要移开压在它上面的物体（放进去比较晚的物体）。</p>\n</li>\n<li>\n<p>堆栈中定义了一些操作。两个最重要的是PUSH和POP。PUSH操作在堆栈的顶部加入一个元素。POP操作相反，在堆栈顶部移去一个元素，并将堆栈的大小减一。</p>\n</li>\n<li>\n<p>栈的应用—递归</p>\n</li>\n</ul>\n<h4 id=\"队列\"><a class=\"header-anchor\" href=\"#队列\">#</a> 队列</h4>\n<ul>\n<li>\n<p>队列是只允许在一端进行插入操作、而在另一端进行删除操作的线性表。允许插入的一端称为队尾，允许删除的一端称为队头。它是一种特殊的线性表，特殊之处在于它只允许在表的前端进行删除操作，而在表的后端进行插入操作，和栈一样，队列是一种操作受限制的线性表。</p>\n</li>\n<li>\n<p>队列是一种先进先出的数据结构，又称为先进先出的线性表，简称 FIFO（First In First Out）结构。也就是说先放的先取，后放的后取，就如同行李过安检的时候，先放进去的行李在另一端总是先出来，后放入的行李会在最后面出来。</p>\n</li>\n</ul>\n<h2 id=\"_6-输入一棵二叉树的根结点，求该树的深度？\"><a class=\"header-anchor\" href=\"#_6-输入一棵二叉树的根结点，求该树的深度？\">#</a> 6.输入一棵二叉树的根结点，求该树的深度？</h2>\n<p>二叉树的结点定义如下：</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">struct</span> <span class=\"token class-name\">BinaryTreeNode</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> m_nValue ；\n\tBinaryTreeNode<span class=\"token operator\">*</span> m_pLeft<span class=\"token punctuation\">;</span>\n\tBinarvTreeNode<span class=\"token operator\">*</span> m_pRight ；\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><ul>\n<li>如果一棵树只有一个结点，它的深度为1。</li>\n<li>如果根结点只有左子树而没有右子树，那么树的深度应该是其左子树的深度加1；同样如果根结点只有右子树而没有左子树，那么树的深度应该是其右子树的深度加1。</li>\n<li>如果既有右子树又有左子树，那该树的深度就是其左、右子树深度的较大值再加1。</li>\n</ul>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">int</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pRoot <span class=\"token operator\">==</span> nullptr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"_7-输入一课二叉树的根结点，判断该树是不是平衡二叉树？\"><a class=\"header-anchor\" href=\"#_7-输入一课二叉树的根结点，判断该树是不是平衡二叉树？\">#</a> 7.输入一课二叉树的根结点，判断该树是不是平衡二叉树？</h2>\n<ul>\n<li>\n<p>重复遍历结点</p>\n<p>先求出根结点的左右子树的深度，然后判断它们的深度相差不超过1，如果否，则不是一棵二叉树；如果是，再用同样的方法分别判断左子树和右子树是否为平衡二叉树，如果都是，则这就是一棵平衡二叉树。</p>\n</li>\n<li>\n<p>遍历一遍结点</p>\n<p>遍历结点的同时记录下该结点的深度，避免重复访问。</p>\n</li>\n</ul>\n<p>方法1:</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\n    TreeNode<span class=\"token operator\">*</span> left<span class=\"token punctuation\">;</span>\n    TreeNode<span class=\"token operator\">*</span> right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> left<span class=\"token operator\">=</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> right<span class=\"token operator\">=</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> left<span class=\"token operator\">></span>right<span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \nbool <span class=\"token function\">IsBalanced</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> left<span class=\"token operator\">=</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> right<span class=\"token operator\">=</span><span class=\"token function\">TreeDepth</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> diff<span class=\"token operator\">=</span>left<span class=\"token operator\">-</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">></span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> diff<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">IsBalanced</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">IsBalanced</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br></div><!--beforeend--></div><!--afterend--><p>方法2：</p>\n<!--beforebegin--><div class=\"language-c line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-c\"><code>bool <span class=\"token function\">IsBalanced_1</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> diff<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">IsBalanced_1</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">IsBalanced_1</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        diff<span class=\"token operator\">=</span>left<span class=\"token operator\">-</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> diff<span class=\"token operator\">>=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            depth<span class=\"token operator\">=</span>left<span class=\"token operator\">></span>right<span class=\"token operator\">?</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \nbool <span class=\"token function\">IsBalancedTree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> pRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> depth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">IsBalanced_1</span><span class=\"token punctuation\">(</span>pRoot<span class=\"token punctuation\">,</span>depth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div><!--beforeend--></div><!--afterend--></div>\n",null]}