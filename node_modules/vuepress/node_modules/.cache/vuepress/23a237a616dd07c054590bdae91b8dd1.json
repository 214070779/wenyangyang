{"remainingRequest":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Debug-tips.md?vue&type=template&id=39e732d6&","dependencies":[{"path":"/Users/yangyangwen/Desktop/wenyangyang/docs/iOS-Summary/Debug-tips.md","mtime":1568205954000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/yangyangwen/Desktop/wenyangyang/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"调试技巧\"><a class=\"header-anchor\" href=\"#调试技巧\">#</a> 调试技巧</h1>\n<h2 id=\"_1-lldb常用的调试命令？\"><a class=\"header-anchor\" href=\"#_1-lldb常用的调试命令？\">#</a> 1.LLDB常用的调试命令？</h2>\n<ul>\n<li>\n<p>po：print object的缩写，表示显示对象的文本描述，如果对象不存在则打印nil。</p>\n</li>\n<li>\n<p>p：可以用来打印基本数据类型。</p>\n</li>\n<li>\n<p>call：执行一段代码 如：call NSLog(@&quot;%@&quot;, @&quot;yang&quot;)</p>\n</li>\n<li>\n<p>expr：动态执行指定表达式</p>\n</li>\n<li>\n<p>bt：打印当前线程堆栈信息 （bt all 打印所有线程堆栈信息）</p>\n</li>\n<li>\n<p>image：常用来寻找栈地址对应代码位置 如：image lookup --address 0xxxx</p>\n</li>\n</ul>\n<h2 id=\"_2-断点调试\"><a class=\"header-anchor\" href=\"#_2-断点调试\">#</a> 2.断点调试</h2>\n<ul>\n<li>\n<p>条件断点</p>\n<p>打上断点之后，对断点进行编辑，设置相应过滤条件。下面简单的介绍一下条件设置：</p>\n<p>Condition：返回一个布尔值，当布尔值为真触发断点，一般里面我们可以写一个表达式。</p>\n<p>Ignore：忽略前N次断点，到N+1次再触发断点。</p>\n<p>Action：断点触发事件，分为六种：</p>\n<ul>\n<li>\n<p>AppleScript：执行脚本。</p>\n</li>\n<li>\n<p>Capture GPU Frame：用于OpenGL ES调试，捕获断点处GPU当前绘制帧。</p>\n</li>\n<li>\n<p>Debugger Command：和控制台中输入LLDB调试命令一致。</p>\n</li>\n<li>\n<p>Log Message：输出自定义格式信息至控制台。</p>\n</li>\n<li>\n<p>Shell Command：接收命令文件及相应参数列表，Shell Command是异步执行的，只有勾选“Wait until done”才会等待Shell命令执行完在执行调试。</p>\n</li>\n<li>\n<p>Sound：断点触发时播放声音。</p>\n</li>\n</ul>\n<p>Options(Automatically continue after evaluating actions选项)：选中后，表示断点不会终止程序的运行。</p>\n</li>\n<li>\n<p>异常断点</p>\n<p>异常断点可以快速定位不满足特定条件的异常，比如常见的数组越界，这时候很难通过异常信息定位到错误所在位置。这个时候异常断点就可以发挥作用了。</p>\n<p>Exception：可以选择抛出异常对象类型：OC或C++。</p>\n<p>Break：选择断点接收的抛出异常来源是Throw还是Catch语句。</p>\n</li>\n<li>\n<p>符号断点</p>\n<p>符号断点的创建方式和异常断点一样一样的，在符号断点中可以指定要中断执行的方法：</p>\n<p>Symbol:[类名 方法名]可以执行到指定类的指定方法中开始断点。</p>\n</li>\n</ul>\n<h2 id=\"_3-ios-常见的崩溃类型有哪些？\"><a class=\"header-anchor\" href=\"#_3-ios-常见的崩溃类型有哪些？\">#</a> 3.iOS 常见的崩溃类型有哪些？</h2>\n<ul>\n<li>\n<p>unrecognized selector crash</p>\n</li>\n<li>\n<p>KVO crash</p>\n</li>\n<li>\n<p>NSNotification crash</p>\n</li>\n<li>\n<p>NSTimer crash</p>\n</li>\n<li>\n<p>Container crash</p>\n</li>\n<li>\n<p>NSString crash</p>\n</li>\n<li>\n<p>Bad Access crash （野指针）</p>\n</li>\n<li>\n<p>UI not on Main Thread Crash</p>\n</li>\n</ul>\n</div>\n",null]}